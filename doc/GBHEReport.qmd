---
title: "GBHE 2015 and 2023 Dual-Frame Survey Estimation"
author: "Mark C. Otto 12 December 2024"
echo: false
eval: true
warning: false
error: false
format: docx
editor: source
bibliography: GBHESurvey.bib
---

## Introduction

The Great Blue Heron (Ardea herodias) is still a species of Special Concern in the State of Maine, USA as it continues its decline beginning in 1995 (D'Auria 2010). We follow @DAuriaOtto2018. Deviations will be noted. We estimate both years of the survey together, re-estimating the 2015 survey. We do expect some differing results from our 2018 article. We do expect declines in the number of colonies and numbers per colony.

This report will set up analysis for the\ `JAGS`\ Bayesian estimation model will use both generalized linear and random effect mixed models methods for the initial values and for the model itself.  In the next report, they will be compared to these estimates as a check.

## Data and Program Set Up

The original data is in the\ `ori`\ directory in the `GBHE.2015` and GBHE.2023`directories.  I pull the data and spatial shape files from them.  The lists and counts are in the`data`directory and the spatial files are stored in the\ `gis`\ directory in\ `.kml`\ files.  The\ `GBHE`\ project has both years of data. \ `Quarto`\  documents are in the\ `doc`\ directory.  All the data can be loaded for analysis from\ `GBHE.RData`\  in the\ `output`\ directory.

```{r Setup}
# Project directory is "/Users/MOtto/Profesional/GBHE"
# knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# The above did not work.
ProjDir <- rprojroot::find_rstudio_root_file()
library(sf)
library(MASS)
library(DualFrame)
library(CollisionModel)
# library(Dist). # I could not get the S4 object to work
library(dplyr)
library(tidyr)
library(rv)
library(xlsx)
library(here)

```

To do simple checks on the estimates, we link the files for the data we are summarizing. 
We use some personal functions to calculate the mean and standard deviation (SD) of the $Beta$ distribution, [Beta](file://`{r} here::here("R/Beta.R")`), 
the [logit](file:///~/Ref/RLib/logit.R) function and its inverse, [expit](file:///~/Ref/RLib/expit.R), and 
the multinomial likelihood for double-observer likelihoods, [CRC](file:///`{r} here::here("R/CRC.R")`).
We use two-sided 95 percent confidense intervals.  
The results are saved in the\ `doc/Notes`\ directory and simulations in \ `TmpData`\ directory.  

```{r VariableSet}
source("~/Ref/RLib/logit.R")
source("~/Ref/RLib/expit.R")
source(here::here("R/Beta.R"))
source(here::here("R/CRC.R"))
source(here::here("R/LastFirst.R"))
cMdl <- "Simple"
Probs <- c(0.5, 0.05, 0.95)
source(here::here("R/MkSmry.R"))
File <- here::here(paste("doc/Notes/", cMdl, ".xlsx", sep = ""))
SimFile <- here::here(paste("TmpData/", cMdl, ".PS.RData", sep = ""))
lEst <- TRUE

# Load the single variables
source(file = here::here("data/MetaVars.R"))

# All the data in `output/GBHE.RData` is in the `data` directory.
load(file = here::here("output/GBHE.RData"))

# I want to get the right colonies. Sort this out later and make ColonySF match
# If Colony2 is right, then make it add it into the R save file.  Colon does have the 
# new colonies, so is right.  Made read-only
# Colony2 <- readr::read_csv(here::here("data/Colony.csv"), col_types = "icccddii")
# Colony <- Colony2

```

## Study Area

The study area is the state of Maine divided in the same 10 km x 10 km grid intersected by the same strata.
The Maine state boundary is in [MEBoundarSF.kml](file:///`{r} here::here("gis/MEBoundarySF.kml")`), 
the stratum layer is in [StrSF.kml](file:///`{r} here::here("gis/StrSF.kml")`), and
the stratum-plot layer is in [StrPlotSF.kml](file:///`{r} here::here("gis/StrPlotSF.kml")`).

# Sample Size Determination

The same nest list as plus the new colonies found on in 2015 survey. The list frame is all the plots with at least one colony. The area frame consists of all the plots intersected by strata. The survey was designed to optimally strata and frame sample sizes to obtain a 80 percent chance of detecting a 25 percent decline at a 10 percent significance level between two survey periods. We used prior information on occupancy, colony densities, and observer detection. This requires an 8.3 percent CV.
## Samples

Add the combined sampled plots to both the list and area frames.

```{r GRTSSmp}
# Combined plots belong in both the list and area frames.
tGRTSSmp1 <- bind_rows(
  GRTSSmp %>%
    mutate(Frame = "List") %>%
    filter(!grepl("Area", SmpType)) %>%
    select(Year, Frame, Str, PlotID),
  GRTSSmp %>%
    mutate(Frame = "Area") %>%
    filter(!grepl("List", SmpType)) %>%
    select(Year, Frame, Str, PlotID)
) 
  
# Add the colonies for
tGRTSSmp <- left_join(
  tGRTSSmp1,
  anti_join(Colony, NewColonies, by = c("Year", "FWSColonyID")) %>%
    group_by(Year, Str, PlotID) %>%
    summarize(nListColony = n(), .groups = "drop"),
  by = join_by(Year, Str, PlotID)
) %>%
  mutate(nListColony = ifelse(is.na(nListColony), 0, nListColony))

# Include the number of colonies
GRTSSmpYFS <- tGRTSSmp %>%
  group_by(Year, Frame, Str) %>%
  summarize(
    nPlot = n(),
    nListColony = sum(nListColony),
    .groups = "drop"
  ) %>%
  arrange(factor(Frame, cFrame), Year, factor(Str, cStr))

knitr::kable(GRTSSmpYFS, digits = 0, caption = "Number of sample plots and list colonies for each year, frame, and stratum.")

rm(tGRTSSmp1)

```

## Field Methods

(Check with Danielle D'Auria and add stratum-plot-known nest map)

## Mark List and Area Frame GBHE Observations
Get rid of the new and out-of-sample colony observations.  `NewColonies` is the list of new colonies found in each year's survey that were given colony numbers.  (All were in both 2015 and 2023.). Mark `OOS` observations as out-of-sample.  Note that `OOS` means out-of-sample.

Do we need location too?  Why are some rear counts NA? For now assume they are zero.

Do these duplicate observations make sense?

```{r GetListObs}
cFrame <- c("List", "Area")

GBHEObs <- left_join(
  RecObs %>%
    filter(!(AOU != "GBHE" |
               is.na(FWSColonyID))) %>%
    mutate(Str = factor(Str, cStr),
         InSmp = siteID != "OOS",
         rNest = ifelse(is.na(rNest), 0, rNest),
         rAct = ifelse(is.na(rAct), 0, rAct)
         ) %>%
    dplyr::select(
      Year,
      Str,
      PlotID,
      FWSColonyID,
      InSmp,
      Front,
      Rear,
      CapHist,
      fNest,
      rNest,
      fAct,
      rAct
    ) ,
  NewColonies %>%
    mutate(Frame = "Area"),
  by = c("Year", "FWSColonyID")
) %>%
  mutate(Frame = factor(if_else(is.na(Frame), "List", Frame), cFrame)) %>%
  dplyr::select(Year,
                Frame,
                Str,
                PlotID,
                FWSColonyID,
                InSmp,
                Front,
                Rear,
                CapHist,
                fNest,
                rNest,
                fAct,
                rAct)

# These duplicates need to be reconciled.
DupList <- GBHEObs %>%
  mutate(YrID = paste(Year, FWSColonyID, sep = ".")) %>%
  arrange(YrID) %>%
  filter(YrID %in% YrID[duplicated(YrID)]) %>%
  dplyr::select(-YrID)
knitr::kable(DupList, digits = 0, caption = "Duplicate observations in RecObs.")

```

## Colony Observations by Observer
Gather the observations of colony nest and active nest sizes by observer.
The ground observations should be added to this.

Note that in both 2015 and 2023, ME.0034 was sighted in A08 or cl.1d, a list nest in an area plot.

```{r SampleColonies}

SeatObs <- bind_rows(
  GBHEObs %>%
    mutate(
      Seat = "Front",
      Obsr = Front,
      Nest = fNest,
      Act = fAct
    ) %>%
    dplyr::select(Year, Frame, Str, PlotID, FWSColonyID, InSmp, Obsr, Seat, Nest, Act),
  GBHEObs %>%
    mutate(
      Seat = "Rear",
      Obsr = Rear,
      Nest = rNest,
      Act = rAct
    ) %>%
    dplyr::select(Year, Frame, Str, PlotID, FWSColonyID, InSmp, Obsr, Seat, Nest, Act),
) 

```
## Ground Observations
Load the ground truth data. Some of the ground observations have NAs for active counts.  

Check the original data where the ground observations are less than the fixed wing.  The more correct way to include these are to join them with the GRTSSmp by plot, stratum, and year.

```{r GroundObservations}

GroundObs <- left_join(
  st_drop_geometry(GroundObsSF),
  tGRTSSmp %>%
    mutate(InSmp = TRUE),
  by = c("Year", "Frame", "Str", "PlotID")
) %>%
  mutate(InSmp = ifelse(is.na(InSmp), FALSE, InSmp)) %>%
  dplyr::select(Year, Frame, Str, PlotID, FWSColonyID, InSmp, Obsr, Seat, Nest, Act)

TruthLess <- inner_join(GroundObs, SeatObs, by = c("FWSColonyID", "Year", "Str", "PlotID")) %>%
  filter(Nest.x < Nest.y | Act.x < Act.y) %>%
  dplyr::select(Year, Str, PlotID, FWSColonyID, Nest.x, Nest.y, Act.x, Act.y)
knitr::kable(TruthLess, digits = 0, caption = "Where fixed-wing observations are more than the ground observations.")

rm(tGRTSSmp)

```

## Combine Ground Observations
Add the ground observations. These do include ground observations less than the fix with. Some aerial counts may be higher than the ground truth, so use a Poisson rather than a binomial, so the observed `n` is not a fixed upper limit in the model.

```{r ColoniesWithGround}
AllObs <- bind_rows(
  SeatObs %>%
    dplyr::select(Year, Frame, Str, PlotID, FWSColonyID, InSmp, Obsr, Seat, Nest, Act),
  GroundObs %>%
    dplyr::select(Year, Frame, Str, PlotID, FWSColonyID, InSmp, Obsr, Seat, Nest, Act)
) %>%
  mutate(Seat = relevel(factor(Seat, cSeat), "Front")) %>%
  arrange(Year, Frame, Str, PlotID, FWSColonyID, Seat, Obsr)

```

Need to remove the training flight of `DD` and `DK` on `ME.0822`.

```{r AllObs}
  AllObs %>%
    filter(Year == 2015 & FWSColonyID == "ME.0822")
  # Check.  Can't separate out DD in the two observations, so use row names
  AllObs %>%
    filter(Year == 2015 & !rownames(AllObs) %in% c("GBHE.SC. 84", "GBHE.SC. 841"))
  
  # AllObs <- AllObs %>%
  #   filter(!rownames(AllObs) %in% c("GBHE.SC. 84", "GBHE.SC. 841"))
  
```

## Colonies by Year and Stratum
Summarize the colonies by year and stratum for simple analyses.  
The known colonies are in [Colony.csv](file:///`{r} here::here("data/Colony.csv")`).  These are separated by year.  The 2034 list includes the 2015 new colonies and other incidentally found colonies since 2015.
The all colony spatial layer is in [AllColonySF.kml](file:///`{r} here::here("gis/AllColonySF.kml")`) is of all colonies found at anytime.  

When the colony list includes all the species, then this can be simplied by removing `AllObs`.

```{r, KnownNestPlots}
# I use n_distinct but the colony ids are unique.  Handles colonies observed multiple times.
# I do not have all the colonies in the colony list, so combine with those observed.  And remove the new colonies found.
ListCol <- anti_join(
  bind_rows(
    AllObs %>%
      filter(Frame == "List") %>%
      select(Year, Str, FWSColonyID),
    Colony %>%
      select(Year, Str, FWSColonyID)
  ) %>%
  distinct(),
  NewColonies,
  by = c("Year", "FWSColonyID")
)

YrStrCol <- ListCol %>%
  group_by(Year, Str) %>%
  summarize(nColony = n_distinct(FWSColonyID), .groups = "drop") %>%
  arrange(Year, factor(Str, cStr))

# I am not sure why the above does not the same as GTRSSmpYFS
# YrStrCol <- GRTSSmpYFS %>%
#   filter(Frame == "List") %>%
#   select(Year, Str, nColony = nListColony)

  knitr::kable(YrStrCol, digits = 2, caption = "List Frame Colony Summary: The known colony lists for each year.")

```

## Bayesian List Estimation

Summary of the stratum areas, number of known colonies, colonies for strata and the Maine totals.

The proportions active have the colony sites as a denominator.  It is more certain than using the nest estimate.  In the Bayesian estimation, it is more natural to use the nest estimate because biologically the active are a proportion of the total colonies.

In the Cochran survey estimation, the only error is in the prediction of the number of colonies in the non-sample.  The colonies observed in the sample are fixed, i.e., with no error.

The number of colonies is right in the Colony Summary but not in the List Frame Colony Summary. (corrected?)

Check why the stratum and plot are missing from some observations.

```{r ListSmry}

tLstSmry <- AllObs %>%
  filter(Frame == "List" & !is.na(Str)) %>%
  group_by(Year, Str, FWSColonyID, InSmp) %>%
  summarize(isNest = as.integer(any(Nest > 0, na.rm = TRUE)),
            isAct = as.integer(any(Act > 0, na.rm = TRUE)),
            .groups = "drop") %>%
  group_by(Year, Str, InSmp) %>%
  summarize(
    # Need to fix the list because it should not be larger than the colonies
    # sampled.
    nSmpCol = n_distinct(FWSColonyID),
    # Already grouped by FWSColonyID
    nNestCol = sum(isNest),
    nActCol = sum(isAct),
    .groups = "drop"
  ) %>%
  pivot_wider(
    id_cols = c("Year", "Str"),
    names_from = "InSmp",
    values_from = c("nSmpCol", "nNestCol", "nActCol"),
    values_fill = 0
  ) %>%
  select(
    Year,
    Str,
    nSmpCol = nSmpCol_TRUE,
    nNSCol = nSmpCol_FALSE,
    nNestCol = nNestCol_TRUE,
    nNestNSCol = nNestCol_FALSE,
    nActCol = nActCol_TRUE,
    nActNSCol = nActCol_FALSE
  )

LstSmry <- inner_join(tLstSmry, YrStrCol, by = c("Year", "Str")) %>%
  mutate(
    # Need to fix the list because it should not be larger than the colonies
    # sampled.
    # Remove colonies were nonsample observations have been made.
    nColonyPred = nColony - nSmpCol - nNSCol,
    NestColNu = NA,
    NestColNup = NA,
    pNestCol = NA,
    pNestColSD = NA,
    nEstNestCol = NA,
    nEstNestColSD = NA,
    pActCol = NA,
    pActColSD = NA,
    nEstActCol = NA,
    nEstActColSD = NA
  ) %>%
  dplyr::select(
    Year,
    Str,
    nColony,
    nColonyPred,
    nSmpCol,
    nNSCol,
    NestColNu,
    NestColNup,
    nNestCol,
    nNestNSCol,
    nActCol,
    nActNSCol,
    nNSCol,
    pNestCol,
    pNestColSD,
    nEstNestCol,
    nEstNestColSD,
    pActCol,
    pActColSD,
    nEstActCol,
    nEstActColSD
  ) %>%
  arrange(Year, factor(Str, cStr))

# Arrrrgh will not let Beta work on vectors.
for (iYrStr in 1:nrow(LstSmry)) {
  # iYrStr <- 1
  
  # Estimated proportion of occupied colony sites and the number of colonies
   LstSmry[iYrStr, "NestColNu"] <- 1 + LstSmry[iYrStr, "nNestCol"]
  LstSmry[iYrStr, "NestColNup"] <- 1 + LstSmry[iYrStr, "nSmpCol"] - LstSmry[iYrStr, "nNestCol"]
 tBeta <- Beta(nu = LstSmry[iYrStr, "NestColNu"], nup = 1 + LstSmry[iYrStr, "nSmpCol"] - LstSmry[iYrStr, "nNestCol"])
 LstSmry[iYrStr, "pNestCol"] <- attr(tBeta, "Mean")
  LstSmry[iYrStr, "pNestColSD"] <- attr(tBeta, "SD")
  LstSmry[iYrStr, "nEstNestCol"] <- LstSmry[iYrStr, "nNestCol"] + LstSmry[iYrStr, "nNestNSCol"] +
    LstSmry[iYrStr, "pNestCol"] * LstSmry[iYrStr, "nColonyPred"]
  LstSmry[iYrStr, "nEstNestColSD"] <- LstSmry[iYrStr, "pNestColSD"] * LstSmry[iYrStr, "nColonyPred"]
  
  # Estimated proportion of active colonies from all occupied colony sites
  # (Is this they right definition?)
  tBeta <- Beta(nu = 1 + LstSmry[iYrStr, "nActCol"], nup = 1 + LstSmry[iYrStr, "nSmpCol"] - LstSmry[iYrStr, "nActCol"])
  LstSmry[iYrStr, "pActCol"] <- attr(tBeta, "Mean")
  LstSmry[iYrStr, "pActColSD"] <- attr(tBeta, "SD")
  LstSmry[iYrStr, "nEstActCol"] <- LstSmry[iYrStr, "nActCol"] + LstSmry[iYrStr, "nActNSCol"] +
    LstSmry[iYrStr, "pActCol"] * LstSmry[iYrStr, "nColonyPred"]
  LstSmry[iYrStr, "nEstActColSD"] <- LstSmry[iYrStr, "pActColSD"] * LstSmry[iYrStr, "nColonyPred"]
}

knitr::kable(LstSmry[, c(
  "Year",
  "Str",
  "nColony",
  "nColonyPred",
  "nSmpCol",
  "nNSCol",
  "nNestCol",
  "nNestNSCol",
  "nActCol",
  "nActNSCol"
)], digits = 2, caption = "List Frame Colony Summary:  The colonies to predict are the number of colonies les the sample and non-sample observations, nColonyPred = nColony - nSmpCol - nNsCol.")

```
## Nests in colony summaries
Note how much lower the proportion of nest colonies there are in 2023 than 2015

```{r NestColonySummary}
knitr::kable(LstSmry[, c("Year",
                         "Str",
                         "pNestCol",
                         "pNestColSD",
                         "nEstNestCol",
                         "nEstNestColSD")], digits = 2, caption = "List Frame Colony Summary")

```
## Active Nests in colony summaries
The `pActCol` is the ratio from the number of list nests not the number of nest colonies.

```{r ActiveNestColonySummary}
knitr::kable(LstSmry[, c("Year",
                         "Str",
                         "pActCol",
                         "pActColSD",
                         "nEstActCol",
                         "nEstActColSD")], digits = 2, caption = "List Frame Active Colony Summary")
rm(tLstSmry)

```

## Analytical Methods

The same model was used for the estimation for both years. Different occupancies, colony sizes, and proportion active were estimated for year and strata. We estimated only a common rear observer detection rate because of the low number of capture histories, especially in 2023. Note that there were no observer detections unless the front observer also detected them (no `01` capture histories).

## Summarize the area frame

```{r ActivePerColony}
tGRTSArea <-  GRTSSmp %>%
  filter(SmpType != "list") %>%
  dplyr::select(Year, Str, PlotID, KMSq)

NewObs <- left_join(
  tGRTSArea,
  AllObs %>%
    filter(Frame == "Area") %>%
    group_by(Year, Str, PlotID, FWSColonyID) %>%
    summarize(
      nNestCol = as.integer(any(Nest > 0, na.rm = TRUE)),
      nActCol = as.integer(any(Act > 0, na.rm = TRUE)),
      .groups = "drop"
    ),
  by = c("Year", "Str", "PlotID")
) %>%
  mutate(Year = factor(Year, cYear),
         Str = factor(Str, levels = cStr),) %>%
  group_by(Year, Str, PlotID) %>%
  summarize(
    nNestCol = sum(nNestCol, na.rm = TRUE),
    nActCol = sum(nActCol, na.rm = TRUE),
    KMSq = max(KMSq, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(YrStr = factor(paste(Year, Str, sep = "."), cYrStr))

knitr::kable(
  NewObs %>%
    group_by(Year, Str) %>%
    summarize(
      nNestCol = sum(nNestCol, na.rm = TRUE),
      nActCol	 = sum(nActCol	, na.rm = TRUE),
      KMSq = sum(KMSq, na.rm = TRUE),
      .groups = "drop"
    ),
  digits = 0,
  caption = "New colony year-stratum summaries"
)
rm(tGRTSArea)

```

## Estimate New Colonies

Use a linear regression. The $R^2$ is bad but the F-statistic is significant at the 0.01 level.  These are the new nest per colony estimates.  Note that the variance is $(X'X)^{-1}\sigma^{-2}$, so the the zero estimates can have a positive variance.  This also would make more sense as a log-Poisson model that has no negative estimates.

I added a Poisson regression that would not allow any negative estimates on the original scale.  We need to adjust the AIC by the log-area weights to make them comparable, but is the data the same?

From spot checking the means, they come close to the ordinary regression estimates.

```{r EstNewCol}
tMdlMtx <- model.matrix  ( ~ YrStr - 1, data = NewObs)
MdlMtx <- diag(NewObs$KMSq) %*% tMdlMtx

NewColMdl <- lm(nNestCol ~ MdlMtx - 1, data = NewObs)
summary(NewColMdl)
NewColGLM <- glm(nNestCol ~ tMdlMtx - 1, 
                 family = poisson, weight = log(NewObs$KMSq),
                 data = NewObs)
summary(NewColGLM)
tAIC <- AIC(NewColMdl, NewColGLM)
tAIC$AIC <-  tAIC$AIC- c(0, sum(log(NewObs$KMSq)))
tAIC

NewColMn <- coefficients(NewColMdl)
NewColSD <- sqrt(diag(vcov(NewColMdl)))

```

## Area Active Colony Estimation

```{r EstNewAct}
NewActColMdl <- lm(nActCol ~ MdlMtx - 1, data = NewObs)
summary(NewActColMdl)
NewActColMn <- coefficients(NewActColMdl)
NewActColSD <- sqrt(diag(vcov(NewActColMdl)))

```
Get the nonsample plots.  

```{r NonSmpPlots}
tPlot <- expand_grid(Year = cYear, Plot %>%
                       dplyr::select(Str, PlotID, KMSq)) %>%
  mutate(Year = factor(Year, cYear), Str = factor(Str, cStr)) %>%
  arrange(Year, Str, PlotID)

NonSmpPlot <- anti_join(tPlot ,
                       NewObs %>%
                         dplyr::select(Year, Str, PlotID),
                       by = c("Year", "Str", "PlotID")) %>%
  mutate(Str = factor(Str, cStr))
rm(tPlot)

```

## New Colony Estimates

Make a simple summary of the new colonies. Use linear regression to get the density of colonies and their SDs. We use the finite sample to only predict the number and SD of colonies in the non-sampled plots.

```{r NewColEst}
NewObsYS <-   NewObs %>%
  group_by(Year, Str) %>%
  summarize(
    nPlot = n(),
    nSmpNestCol = sum(nNestCol),
    nSmpActCol = sum(nActCol),
    SmpKMSq = sum(KMSq),
    .groups = "drop"
  )

NonSmpYS <-  NonSmpPlot %>%
  group_by(Year, Str) %>%
  summarize(NSPlot = n(),
            NSKMSq = sum(KMSq),
            .groups = "drop")

# Check that the estimates are in the same order as the indices.
NewSmry <- inner_join(NewObsYS, NonSmpYS, by = c("Year", "Str")) %>%
  mutate(
    NestColDen = NewColMn,
    NestColSD = NewColSD,
    nEstNestCol = nSmpNestCol + NestColDen * NSKMSq,
    nEstNestColSD = NestColSD * NSKMSq,
    ActColDen = NewActColMn,
    ActColSD = NewActColSD,
    nEstActCol = nSmpActCol + ActColDen * NSKMSq,
    nEstActColSD = ActColSD * NSKMSq
  )

```
  ## New Colony Summaries

```{r NewColSmry}
knitr::kable(NewSmry[, c(1:3, 7, 6, 4, 5)],
             digits = c(0, 0, 0, 0, 0, 0, 0),
             caption = "Area Plot Summaries")

```
## New Nest Summaries

```{r NewNestSmry}
knitr::kable(NewSmry[, c(1, 2, 4, 9:12)],
             digits = c(0, 0, 4, 4, 5, 1, 2),
             caption = "New Colony Estimates")

```
## New Active Nest Summaries

```{r NewActSmry}
knitr::kable(NewSmry[, c(1, 2, 5, 13:16)],
             digits = c(0, 0, 4, 4, 5, 1, 2),
             caption = "New Active Colony Estimates")

```

Make factors of the colony ID and the year-frame-stratum

```{r AllNestObs}

# Group over observers
# For now just get the max and don't worry about seat
AllNestObs <- AllObs %>%
  mutate(
    YFS = factor(paste(Year, Frame, Str, sep = "."), cYFS),
    Year = factor(Year, cYear),
    Str = factor(Str, cStr),
    Frame = factor(Frame, cFrame),
    Nest = ifelse(is.na(Nest), 0, Nest),
    Act = ifelse(is.na(Act), 0, Act)
  ) %>%
  group_by(Year, Frame, Str, YFS, FWSColonyID, InSmp) %>%
  summarize(
    Nest = max(Nest, na.rm = TRUE),
    Act = max(Act, na.rm = TRUE),
    .groups = "drop"
  )

```

Model list nests per colony with only stratum and frame effects. Use NestMdlFS

The strata model is best by AIC, but is not different from the YFS and there look like there are differents in the stratum pattern by year and frame.

```{r ModelNestPerColony}
NestMdl0 <-
  lm(Nest ~ 1, data = AllNestObs, subset = InSmp)
summary(NestMdl0)
NestMdlStr <-
  lm(Nest ~ Str+-1, data = AllNestObs, subset = InSmp)
summary(NestMdlStr)
NestMdlYrStr <-
  lm(Nest ~ Str + Year+-1, data = AllNestObs, subset = InSmp)
summary(NestMdlYrStr)
NestMdlYFS <-
  lm(Nest ~ YFS - 1, data = AllNestObs, subset = InSmp)
summary(NestMdlYFS)
AIC(NestMdl0, NestMdlStr, NestMdlYrStr, NestMdlYFS)

# Mdl0 estimate and SD
# Need zeros for the year-frame-stratum with no new colonies.
cCoef <- stringr::str_replace(names(coefficients(NestMdlYFS)), "YFS", "")
YFSEst <- rep(0, length = length(cYFS))
names(YFSEst) <- cYFS
YFSSD <- YFSEst
YFSEst[cCoef] <- as.numeric(coefficients(NestMdlYFS))
YFSSD[cCoef] <- as.numeric(sqrt(diag(vcov(NestMdlYFS))))
NestPerCol <- tibble::tibble(
  YFS = cYFS,
  NestPerCol = as.double(YFSEst),
  NestPerColSD = as.double(YFSSD)
) %>%
  separate(YFS, into = c("Year", "Frame", "Str"))

```

Summarize the number of nests as the multiplication of two random variables. For the SD use Goodman(1960) but gave unreasonable results, so used simulations.

```{r NestSmry}
NestSmry <- inner_join(
  bind_rows(
    LstSmry %>%
      mutate(Year = as.character(Year), Frame = "List") %>%
      dplyr::select(Year, Frame, Str, nEstNestCol, nEstNestColSD),
    NewSmry %>%
      mutate(
        Year = as.character(Year),
        Frame = "Area",
        Str = as.character(Str)
      ) %>%
        dplyr::select(Year, Frame, Str, nEstNestCol, nEstNestColSD)
  ),
  NestPerCol,
  by = c("Year", "Frame", "Str")
) %>%
  mutate(
    Year = factor(Year, cYear),
    Frame = factor(Frame, cFrame),
    Str = factor(Str, cStr)
  ) %>%
  mutate(NestMn = nEstNestCol * NestPerCol, NestSD = sqrt(
    pmax(
      0,
      nEstNestCol ^ 2 * nEstNestColSD ^ 2 +
        NestPerCol ^ 2 * NestPerColSD ^ 2 -
        nEstNestColSD ^ 2 * NestPerColSD ^ 2
    )
  ))

# The simulations estimates are good the SD differ from the calculated.
nSim < -10 ^ 5
setnsims(nSim)
nColSim <- rvnorm(mean = NestSmry$nEstNestCol, sd = NestSmry$nEstNestColSD)
C2NSim <- rvnorm(mean = NestSmry$NestPerCol, sd = NestSmry$NestPerColSD)
Nests <- nColSim * C2NSim
NestSmry$NestMn <- pmax(0, rvmean(Nests))
NestSmry$NestSD <- rvsd(Nests)
knitr::kable(NestSmry,
             digits = c(0, 0, 0, 0, 1, 2, 2, 0, 1),
             caption = "Nest per Colony Summary")

```
## The year and frame totals and the year dual-frame totals.

```{r NestSmry2}
# Calculate the 90 percent quantiles
qfcn <- function(x) {
  Qt <- qnorm(p = c(0.5, 0.05, 0.95),
              mean = x[1],
              sd = x[2])
  rndQt <- pmax(0, round(Qt, digits = 0))
  rndQt
}

NestYF <- NestSmry %>%
  group_by(Year, Frame, .drop = TRUE) %>%
  summarize(
    nCol = sum(nEstNestCol),
    nCSD = sqrt(sum(nEstNestColSD ^ 2)),
    Nest = sum(NestMn),
    NestSD = sqrt(sum(NestSD ^ 2)),
    NestCI90 = NA,
    .groups = "drop"
  )
NestYFQ <- t(apply(NestYF[, c("Nest", "NestSD")], 1, qfcn))
NestYF$NestCI90 <- paste(format(NestYFQ[, 1]),
                         " (",
                         format(NestYFQ[, 2]),
                         "–",
                         format(NestYFQ[, 3]),
                         ")",
                         sep = "")

knitr::kable(NestYF, digits = c(0, 0, 1, 2, 0), caption = "Year-Frame Nest Colonies")

```
## List Coverage
Of nest colonies, not nests.  It is very high, since few new nests were found, and was the new nests were found.  On one hand, the coverage should include all colonies including the not found, but on the other hand there are no new not-found colonies.

```{r ListCov}
LstCov <- inner_join(
  NestYF %>%
    filter(Frame == "List") %>%
    select(Year, nLstCol = nCol),
  NestYF %>%
    filter(Frame == "Area") %>%
    select(Year, nNewCol = nCol),
  by = "Year"
) %>%
  mutate(
    LstCov = round(100 * nLstCol / (nLstCol + nNewCol))
  )
knitr::kable(LstCov, digits = 0, caption = "List Coverage of Colonies by Year")


```
## Dual-Frame Nest Estimates

```{r NestDF}

NestDF <- NestSmry %>%
  group_by(Year, .drop = TRUE) %>%
  summarize(
    nCol = sum(nEstNestCol),
    nCSD = sqrt(sum(nEstNestColSD ^ 2)),
    Nest = sum(NestMn),
    NestSD = sqrt(sum(NestSD ^ 2)),
    NestCI90 = NA,
    .groups = "drop"
  )


NestDFQ <- t(apply(NestDF[, c("Nest", "NestSD")], 1, qfcn))
NestDF$NestCI90 <- paste(format(NestDFQ[, 1]),
                         " (",
                         format(NestDFQ[, 2]),
                         "–",
                         format(NestDFQ[, 3]),
                         ")",
                         sep = "")

knitr::kable(NestDF, digits = c(0, 1, 2, 0), caption = "Year Dual-Frame Nest Colonies")

```
## Nest Colony Covariance
The survey design is based on the colony CV.  The nest or active nest CV will be much higher.  Having the 2015 nest and active nests estimates, I could have designed a survey for active nest CV.  I could have included the drop in colonies and active nests, but we would not have been able to afford a survey that had such a low active nest CV.  I didn't think of it at the time. 

The 2023 colony CV is twice the 2015, which is not surprising given the drop in the estimates.  Interesting that the nest CVs are so close.

```{r SurveyCVs}
PctCV <- NestDF %>%
  mutate(
    PctColCV = 100 * nCSD / nCol,
    PctNestCV = 100 * NestSD / Nest
  ) %>%
  select(Year, nCol, nCSD, PctColCV, Nest, NestSD, PctNestCV)
knitr::kable(PctCV, digits = 0, caption = "Percent CVs of Colonies and Nests by Year")

```
## Active nest per colony
Model the number of active nests per colony. Stratum is best but use year-frame-stratum model.

```{r ModelActPerColony}
ActMdl0 <-
  lm(Act ~ 1, data = AllNestObs, subset = InSmp)
summary(ActMdl0)

ActMdlStr <-
  lm(Act ~ Str - 1, data = AllNestObs, subset = InSmp)
summary(ActMdlStr)

ActMdlYrStr <-
  lm(Act ~ Year + Str+-1, data = AllNestObs, subset = InSmp)
summary(ActMdlYrStr)

ActMdlYFS <-
  lm(Act ~ YFS - 1, data = AllNestObs, subset = InSmp)
summary(ActMdlYFS)

# Use the YrStr
AIC(ActMdl0, ActMdlStr, ActMdlYrStr, ActMdlYFS)

# MdlYFS estimate and SD
cCoef <- stringr::str_replace(names(coefficients(ActMdlYFS)), "YFS", "")
YFSEst <- rep(0, length = length(cYFS))
names(YFSEst) <- cYFS
YFSEst[cCoef] <- as.numeric(coefficients(ActMdlYFS))
YFSSD[cCoef] <- as.numeric(sqrt(diag(vcov(ActMdlYFS))))
ActPerCol <- tibble::tibble(
  YFS = cYFS,
  ActPerCol = as.double(YFSEst),
  ActPerColSD = as.double(YFSSD)
) %>%
  separate(YFS, into = c("Year", "Frame", "Str"))

```

Summarize the number of active nests as the multiplication of two random variables. For the SD use Goodman(1960) but gave unreasonable results, so used simulations.

```{r ActSmry}
ActSmry <- inner_join(
  bind_rows(
    LstSmry %>%
      mutate(Year = as.character(Year), Frame = "List") %>%
      dplyr::select(Year, Frame, Str, nEstActCol, nEstActColSD),
    NewSmry %>%
      mutate(
        Year = as.character(Year),
        Frame = "Area",
        Str = as.character(Str)
      ) %>%
      dplyr::select(Year, Frame, Str, nEstActCol, nEstActColSD)
  ),
  ActPerCol,
  by = c("Year", "Frame", "Str")
) %>%
  mutate(
    Year = factor(Year, cYear),
    Frame = factor(Frame, cFrame),
    Str = factor(Str, cStr)
  ) %>%
  mutate(ActMn = nEstActCol * ActPerCol, ActSD = sqrt(
    pmax(
      0,
      ActPerCol ^ 2 * nEstActColSD ^ 2 +
        nEstActCol ^ 2 * ActPerColSD ^ 2 -
        nEstActColSD ^ 2 * ActPerColSD ^ 2
    )
  ))

# The simulations estimates are good the SD differ from the calculated.
# This might make more sense as a log-normal simulation, but
nSim < -10 ^ 5
setnsims(nSim)
nColSim <- rvnorm(mean = ActSmry$nEstActCol, sd = ActSmry$nEstActColSD)
C2NSim <- rvnorm(mean = ActSmry$ActPerCol, sd = ActSmry$ActPerColSD)
Act <- nColSim * C2NSim
ActSmry$ActMn <- pmax(0, rvmean(Act), na.rm = TRUE)
ActSmry$ActSD <- rvsd(Act)
knitr::kable(ActSmry,
             digits = c(0, 0, 0, 0, 1, 2, 2, 0, 1),
             caption = "Active per Colony Summary")

```
## Log-Normal Estimates
The simulations estimates are good the SD differ from the calculated.
This might make more sense as a log-normal simulation, but they are a lot more variable.

```{r LnActEst}
nSim <- 10 ^ 5
invisible(setnsims(nSim))
ActLnSmry <- ActSmry
LnActCol <- ifelse(ActSmry$nEstActCol <= 0, -10, log(ActSmry$nEstActCol))
nColSim <- exp(rvnorm(mean = LnActCol, sd = pmin(2, ActSmry$nEstActColSD/exp(LnActCol))))

LnActPerCol <- ifelse(ActSmry$ActPerCol <= 0, -10, log(ActSmry$ActPerCol))
C2NSim <- exp(rvnorm(mean = LnActPerCol, sd = pmin(2, ActSmry$ActPerColSD/exp(LnActPerCol))))
Act <- nColSim * C2NSim
ActLnSmry$ActMn <- pmax(0, rvmean(Act), na.rm = TRUE)
ActLnSmry$ActSD <- rvsd(Act)
knitr::kable(ActLnSmry,
             digits = c(0, 0, 0, 0, 1, 2, 2, 0, 1),
             caption = "Active per Colony Summary Using the Log-Normal")

```

## Colony and list summary

```{r ActSmry2}
ActColYF <- ActSmry %>%
  group_by(Year, Frame) %>%
  summarize(
    nEstActCol = sum(nEstActCol),
    nEstActColSD = sqrt(sum(nEstActColSD ^ 2)),
    ActCI90 = NA,
    .groups = "drop"
  )
ActColYFQ <- t(apply(ActColYF[, c("nEstActCol", "nEstActColSD")], 1, qfcn))
ActColYF$ActCI90 <- paste(format(ActColYFQ[, 1]),
                          " (",
                          format(ActColYFQ[, 2]),
                          "–",
                          format(ActColYFQ[, 3]),
                          ")",
                          sep = "")

knitr::kable(ActColYF, digits = c(0, 0, 1, 2, 0), caption = "Year-Frame Active Colonies")

# Dual-Frame Total Colonies
ActDF <- ActSmry %>%
  group_by(Year, .drop = TRUE) %>%
  summarize(
    nCol = sum(nEstActCol),
    nCSD = sqrt(sum(nEstActColSD ^ 2)),
    Act = sum(ActMn),
    ActSD = sqrt(sum(ActSD ^ 2)),
    ActCI90 = NA,
    .groups = "drop"
  )


ActDFQ <- t(apply(ActDF[, c("Act", "ActSD")], 1, qfcn))
ActDF$ActCI90 <- paste(format(ActDFQ[, 1]),
                         " (",
                         format(ActDFQ[, 2]),
                         "–",
                         format(ActDFQ[, 3]),
                         ")",
                         sep = "")

knitr::kable(ActDF, digits = c(0, 1, 2, 0), caption = "Year Dual-Frame Active Colonies")

```

Get all the observers including the ground, then make all observer seat combinations. Danielle D'Auria was the only front seat observer.

```{r ObserverSeat}
AllObs$Obsr <- factor(AllObs$Obsr, levels = cObsr)
nObsr <- nlevels(AllObs$Obsr)

ObsrSeat <- AllObs %>%
  # dplyr::select(Year, Front, Rear) %>%
  # gather("Year", "Seat", "Obsr") %>%
#  group_by(Year, Seat, Obsr) %>%
  group_by(Year, Seat, Obsr) %>%
  summarize(nObs = n(), .groups = "drop") %>%
  mutate(LstFrst = LastFirst(as.character(Obsr))) %>%
  arrange(Year, LstFrst, Seat) %>%
  dplyr::select(Year, Obsr, Seat, nObs)

```

Make the capture history matrix. Put different rear-seat observers in the area frame

```{r RearObserverIndex}
CHObs <- RecObs %>%
  filter(!is.na(CapHist)) %>%
  mutate(nNest = pmax(0, fNest, rNest, na.rm = TRUE)) %>%
  select(Year, Str, PlotID, FWSColonyID, Front, Rear, AOU, nNest, CapHist)

RearAreaObsr <- unique(CHObs$Rear)
Idx <- order(LastFirst(RearAreaObsr))
RearAreaObsr <- RearAreaObsr[Idx]
nRearAreaObsr <- length(RearAreaObsr)
cCHCol <- c("01", "10", "11", "00")
rm(Idx)

```

Extract capture histories from both the list and area frame observations for any species.  The other species, BAEA and OSPR, have similar nest to GBHE.  Anything that has a capture history.

```{r CaptureHistories}
CapHist <- CHObs %>%
  # Frame, removed
  dplyr::select(Year, Str, PlotID, FWSColonyID, Front, Rear, AOU, nNest, CapHist) %>%
  mutate(
    Str = as.character(Str),
    # is a new nest?
    # inCNA = !grepl("ME", FWSColonyID),
    FRObsr = paste(Front, Rear, sep = "."),
    CH = gsub("x", "0", ifelse(
      CapHist == "", "00", substring(CapHist, 2, 3)
    ))
  ) %>%
  # Frame, removed
  group_by(Year, Str, Front, Rear, FWSColonyID, FRObsr, nNest, CH) %>%
  summarise(N = n(), .groups = "drop") %>%
  pivot_wider(
    names_from = "CH",
    values_from = "N",
    values_fill = 0,
    names_repair = "minimal"
  ) %>%
  mutate(`01` = 0) %>%
  # Could just set to zero
  mutate(`00` = ifelse(`01` > 0 |
                         `10` > 0 |
                         `11` > 0, 0, 1)) %>%
  dplyr::select(Year, # Frame,
                Str, # inCNA,
                Front, Rear, FWSColonyID, FRObsr, nNest, `01`, `10`, `11`, `00`)

```

## Capture Histories by observer
There are only three observers that fly both years, so year is confounded with observer.  Just do by observer.

```{r ObsDet}
tX.Smp <- CapHist %>%
  group_by(Rear) %>%
  summarise(
    nCapHist = n(),
    x01 = sum(`01`),
    x10 = sum(`10`),
    x11 = sum(`11`),
    x00 = sum(`00`)
  )
X.Smp <- matrix(unlist(tX.Smp[3:5]), nrow = 3, byrow = TRUE)
dimnames(X.Smp) <- list(colnames(tX.Smp)[3:5], tX.Smp$Rear)
Parm0 <- c(0.95, rep(0.3, length = ncol(X.Smp)))
# CRC(Parm0, X = X.Smp)

Est <- optim(
  par = Parm0,
  fn = CRC,
  X = X.Smp,
  method =
    # "CG",
    # "Nelder-Mead",
    # "SANN",
    "L-BFGS-B",
  lower = c(0.0001, 0.0001),
  upper = c(0.9999, 0.9999),
  control = list(maxit = 10000), #  reltol = 1e-10),
  hessian = TRUE
)

# Est
DetPNObsr  <- bind_cols(
  Obsr = c("DD", tX.Smp$Rear),
  pDet = round(100 * Est$par, 0),
  SD = round(100 * sqrt(diag(solve(Est$hessian))), 1),
  N = c(NA, currentN)
)
knitr::kable(DetPNObsr, digits = 1, caption = "Front-Rear Observer Detection Estimates")

```
# Detection of rear-seat observer by year
There are so few capture histories and no rear-seat only observations, `01`, just collapse all the rear observers. Two of the nests were sighted twice.

```{r rYrDet}
tX.Smp <- CapHist %>%
  group_by(Year) %>%
  summarise(
    nCapHist = n(),
    x01 = sum(`01`),
    x10 = sum(`10`),
    x11 = sum(`11`),
    x00 = sum(`00`)
  )
X.Smp <- matrix(unlist(tX.Smp[3:5]), nrow = 3, byrow = TRUE)
dimnames(X.Smp) <- list(colnames(tX.Smp)[3:5], cYear)
Parm0 <- c(0.95, rep(0.3, length = ncol(X.Smp)))
# CRC(Parm0, X = X.Smp)

Est <- optim(
  par = Parm0,
  fn = CRC,
  X = X.Smp,
  method =
    # "CG",
    # "Nelder-Mead",
    # "SANN",
    "L-BFGS-B",
  lower = c(0.0001, 0.0001),
  upper = c(0.9999, 0.9999),
  control = list(maxit = 10000), #  reltol = 1e-10),
  hessian = TRUE
)

# Est
DetPNYr  <- bind_cols(
  Obsr = c("DD", cYear),
  Seat = (cSeat[c(1,2,2)]),
  pDet = round(100 * Est$par, 0),
  SD = round(100 * sqrt(diag(solve(Est$hessian))), 1),
  N = c(NA, currentN)
)
knitr::kable(DetPNYr, digits = 1, caption = "Front-Rear Observer Detection Estimates")

# Make the capture matrix for the estimation
 xCH<-t(cbind(t(X.Smp),apply(X.Smp,2,sum)))


```
## Save data and estimates to use with the

```{r SaveEst}
save(
  # Why are Colony, RecObs, GroundObs here when they are created in DataSetUp?
  Colony,
  RecObs,
  LstSmry,
  GroundObs,
  NewObs,
  NewSmry,
  AllObs,
  NestSmry,
  ActSmry,
  ObsrSeat,
  RearAreaObsr,
  nRearAreaObsr,
  cCHCol,
  CapHist,
  xCH,
  DetPNYr,
  file = here::here(paste("output/", cMdl, "Est.RData", sep = ""))
)

```
