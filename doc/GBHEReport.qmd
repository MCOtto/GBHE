---
title: "GBHE 2015 and 2023 Dual-Frame Survey Estimation"
author: "Mark C. Otto. 28 June 2024"
echo: false
eval: true
warning: false
error: false
format: docx
editor: visual
bibliography: GBHESurvey.bib
---

## Introduction

The Great Blue Heron (Ardea herodias) is still a species of Special Concern in the State of Maine, USA as it continues its decline beginning in 1995 (D'Auria 2010). We follow @DAuriaOtto2018. Deviations will be noted. We estiamate both years of the survey together, reestimating the 2015 survey. We do expect differing results but not greatly for the 2015 survey. We do expect declines in the number of colonies and numbers per colony.

## Data and Program Set Up

The original data is in the `ori` directory in the `GBHE.2015` and GBHE.2023`directories.  I pull the data and spatial shape files from them.  The lists and counts are in the`data`directory and the spatial files are stored in the`gis`directory in`.kml`files.  The`GBHER`project has both years of data.`Quarto`documentts are in the`doc`directory.  All the data can be loaded for analysis from`GBHE.RData\` in the output directory.

```{r Setup}
# Project directory is "/Users/MOtto/Profesional/GBHE"
# knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# The above did not work.
ProjDir <- rprojroot::find_rstudio_root_file()
library(sf)
library(MASS)
library(DualFrame)
library(CollisionModel)
# library(Dist). # I could not get the S4 object to work
library(dplyr)
library(tidyr)
library(rv)
library(xlsx)

```

```{r VariableSet}
source("~/Ref/RLib/logit.R")
source("~/Ref/RLib/expit.R")
source("../R/Beta.R")
source("../R/CRC.R")
cMdl <- "Cochran"
Probs <- c(0.5, 0.05, 0.95)
source(here::here("R/MkSmry.R"))
File <- here::here(paste("doc/Notes/", cMdl, ".xlsx", sep = ""))
SimFile <- here::here(paste("TmpData/", cMdl, ".PS.RData", sep = ""))
lEst <- TRUE
cYear <- c(2015, 2023)

# Load the data
load(file = here::here("output/GBHE.RData"))

```

## Study Area

The study area is the state of Maine divided in the same 10 km x 10 km grid interected by the same strata.

```{r Strata}
cDFStr <- as.character(StrSF$Str_FK)
nStr <- length(cDFStr)
cStr <- c(cDFStr, "Total")

```

# Sample Size Determination

The same nest list as plus the new colonies found on in 2015 survey. The list frame is all the plots with at least one colony. The area frame consists of all the plots intersected by strata. The survey was designed to optimally strata and frame sample sizes to obtain a 80 percent chance of detecting a 25 percent decline at a 10 percent significance level between two survey periods. We used prior information on occupancy, colony densities, and observer detection. This requires an 8.3 percent CV.

```{r, KnownNestPlots}
Colony <-  st_drop_geometry(ColonySF) %>%
  select(Year, 
         FWSColonyID = FWSColonyID_PK,
         Str = Str_FK,
         PlotID = PlotID_FK,
         Lng,
         Lat,
         nNest,
         nActive)

LstCol2 <- Colony %>%
  group_by(Year, Str) %>%
  summarize(nCol = n(), .groups = "drop")

```

## Field Methods

(Check with Danielle D'Auria and add stratum-plot-known nest map)

```{r GetListObs}
cFrame <- c("List", "Area")

RecObsList <- RecObs %>%
  filter(!(siteID == "OOS" | is.na(FWSColonyID) | grepl("new", FWSColonyID))) %>%
  mutate(
    Frame = factor("List", cFrame),
        Str = factor(Str, cDFStr)
  ) %>%
  select(Year,
         Frame,
         Year,
         Str,
         PlotID,
         FWSColonyID,
         Front,
         Rear,
         CapHist,
         fNest,
         rNest,
         fAct,
         rAct)

```

Summary of the stratum areas, number of known colonies, colonies for strata and the Maine totals.

```{r ListSmry}
tLstSmry <- RecObsList %>%
  group_by(Year, Str) %>%
  summarize(
    # Need to fix the list because it should not be larger than the colonies
    # sampled.
    nColSmp = n(),
    nNestCol = sum(fNest > 0 | rNest > 0, na.rm = TRUE),
    nActCol = sum(fAct > 0 | rAct > 0, na.rm = TRUE),
    .groups = "drop"
  )

LstSmry <- inner_join(tLstSmry, LstCol2, by = c("Year", "Str")) %>%
  mutate(
    # Need to fix the list because it should not be larger than the colonies
    # sampled.
    nCol = pmax(nCol, nColSmp + 1),
    nColNS = nCol - nColSmp,
    pCol = NA,
    pColSD = NA,
    nLstCol = NA,
    nLstColSD = NA,
    pAct = NA,
    pActSD = NA,
    nLstAct = NA,
    nLstActSD = NA
  ) %>%
  select(
    Year,
    Str,
    nCol,
    nColSmp,
    nNestCol,
    nActCol,
    nColNS,
    pCol,
    pColSD,
    nLstCol,
    nLstColSD,
    pAct,
    pActSD,
    nLstAct,
    nLstActSD
  )
nYrStr <- nrow(LstSmry)
# Arrrrgh will not let Beta work on vectors.
for (iYrStr in 1:nYrStr) {
  # iYrStr <- 1
  
  # Estimated number of colonies
  tBeta <- Beta(nu = 1 + LstSmry[iYrStr, "nNestCol"], nup = 1 + LstSmry[iYrStr, "nColSmp"] - LstSmry[iYrStr, "nNestCol"])
  LstSmry[iYrStr, "pCol"] <- attr(tBeta, "Mean")
  LstSmry[iYrStr, "pColSD"] <- attr(tBeta, "SD")
  LstSmry[iYrStr, "nLstCol"] <- LstSmry[iYrStr, "nNestCol"] +
    LstSmry[iYrStr, "pCol"] * LstSmry[iYrStr, "nColNS"]
  LstSmry[iYrStr, "nLstColSD"] <- LstSmry[iYrStr, "pColSD"] * LstSmry[iYrStr, "nColNS"]
  
  # Estimated number of active colonies
  tBeta <- Beta(nu = 1 + LstSmry[iYrStr, "nActCol"], nup = 1 + LstSmry[iYrStr, "nColSmp"] - LstSmry[iYrStr, "nActCol"])
  LstSmry[iYrStr, "pAct"] <- attr(tBeta, "Mean")
  LstSmry[iYrStr, "pActSD"] <- attr(tBeta, "SD")
  LstSmry[iYrStr, "nLstAct"] <- LstSmry[iYrStr, "nActCol"] +
    LstSmry[iYrStr, "pAct"] * LstSmry[iYrStr, "nColNS"]
  LstSmry[iYrStr, "nLstActSD"] <- LstSmry[iYrStr, "pActSD"] * LstSmry[iYrStr, "nColNS"]
}

knitr::kable(LstSmry[, 1:5], digits = 2, caption = "List Frame Colony Summary")
knitr::kable(LstSmry[, c(1, 7:10)], digits = 2, caption = "List Frame Nest Summary")
knitr::kable(LstSmry[, c(1, 11:14)], digits = 2, caption = "List Frame Active Nest Summary")

```

## Analytical Methods

The same model was used for the estimation for both years. Different occupancies, colony sizes, and proproportion active were estimated for year and strata. We estiamated only a common rear observer detection rate because of the low number of capture histories, especially in 2023. Also, there were no observer detections unless the front observer also detected them (no `01` capture histories).

```{r GetSamplePlots}
RecObsArea <-   RecObs %>%
  filter(siteID != "OOS" & grepl("new", FWSColonyID)) %>%
  mutate(Frame = factor("Area", cFrame),
         Str = factor(Str, cDFStr),) %>%
  select(Year,
         Frame,
         Str,
         PlotID,
         FWSColonyID,
         Front,
         Rear,
         CapHist,
         fNest,
         rNest,
         fAct,
         rAct)

tRecObs <- bind_rows(
  RecObsList,
  RecObsArea
)

```

## Notes and Results

Get the new sample observations. In 2023 there duplicate observations of nests. `0822` at least has different observers.

```{r NewObservations}
NewSmpObs <- tRecObs %>%
  filter(grepl("new", FWSColonyID))

filter((tRecObs), FWSColonyID %in% c("ME.0742", "ME.0822", "ME.0622"))
tRecObs <- unique(tRecObs) 
```

Gather the observations by observer.

```{r SampleColonies}
tSmpColObs <- rbind(
  tRecObs %>%
    mutate(
      Seat = "Front",
      Obsr = Front,
      Nest = fNest,
      Act = fAct
    ) %>%
    select(Year, Frame, Str, PlotID, FWSColonyID, Obsr, Seat, Nest, Act),
  tRecObs %>%
    mutate(
      Seat = "Rear",
      Obsr = Rear,
      Nest = rNest,
      Act = rAct
    ) %>%
    select(Year, Frame, Str, PlotID, FWSColonyID, Obsr, Seat, Nest, Act)
)

# I am not sure why all the ground observations are in the sample plots.
tGRTSLoc <- GRTSLoc %>% filter(EvalStatus) %>%
  select(Year, Str, PlotID)

tSmpColObs2 <- left_join(tSmpColObs, tGRTSLoc, by = c("Year", "Str", "PlotID"))

```

Load the ground truth data. Some of the ground observations have NAs for active counts.

Check the original data.

```{r GroundObservations}
# These are where the ground observations are less than the fixed wing.
tGroundObs <- st_drop_geometry(GroundObsSF) %>%
  select(Year, Frame, Str, PlotID, FWSColonyID, Obsr, Seat, Nest, Act)

TruthLess <- inner_join(tGroundObs,
                        tSmpColObs2,
                        by = c("FWSColonyID", "Year", "Str", "PlotID")) %>%
  filter(Nest.x < Nest.y | Act.x < Act.y) %>%
  dplyr:::select(Year, Str, PlotID, FWSColonyID, Nest.x, Nest.y, Act.x, Act.y)
TruthLess

```

Add the ground observations. These do include ground observations less than the fix with. Some aerial counts may be higher than the ground truth, so use a Poisson rather than a binomial, so the observed `n` is not a fixed upper limit in the model.

```{r ColoniesWithGround}
SmpColObs <- rbind(
  tSmpColObs2,
  tGroundObs %>%
    select(Year, Frame, Str, PlotID, FWSColonyID, Obsr, Seat, Nest, Act)
) %>%
  arrange(Year, Frame, Str, PlotID, FWSColonyID, Seat, Obsr)

```

Need to remove the training flight of `DD` and `DK` on `ME.0822`.

```{r SmpColObs}
  SmpColObs %>%
    filter(Year == 2015 & FWSColonyID == "ME.0822")
  # Check.  Can't separate out DD in the two observations, so use row names
  SmpColObs %>%
    filter(Year == 2015 & !rownames(SmpColObs) %in% c("GBHE.SC. 84", "GBHE.SC. 841"))
  
  # SmpColObs <- SmpColObs %>%
  #   filter(!rownames(SmpColObs) %in% c("GBHE.SC. 84", "GBHE.SC. 841"))

```

## Estimation

Use the counts in a random effects Poisson model to estimate the stratum rates. Let the proportion of active colonies be Act\[s,o\] == 0.

```{r ListEst}
LstData <- SmpColObs %>%
  filter(Frame == "List") %>%
  mutate(Seat = factor(Seat, c("Dirt", "Front", "Rear")),
         fSeat = relevel(Seat, "Front"))
LstEst <- LstData %>%
  mutate(
    Occ = Act > 0
  ) %>%
  group_by(Str) %>%
  summarise(n = sum(!is.na(Act)), 
            pOcc = mean(Occ, na.rm = TRUE), SD = sd(Occ, na.rm = TRUE),
            NestMn = mean(Nest, na.rm = TRUE), NestSD = sd(Nest, na.rm = TRUE),
            ActMn = mean(Act, na.rm = TRUE), ActSD = sd(Act, na.rm = TRUE)) %>%
  mutate(
            pAct = ActMn / NestMn
  )

```

Estimate the density and number of colonies

```{r ActivePerColony}
tGRTSArea <-  GRTSLoc %>%
  filter(SmpType != "area") %>%
  filter(as.logical(EvalStatus)) %>%
  select(Year, Str, PlotID, KMSq)

NewCol <- left_join(
  tGRTSArea,
  SmpColObs %>%
    filter(Frame == "Area") %>%
    distinct(Year, Str, PlotID, FWSColonyID) %>%
    group_by(Year, Str, PlotID) %>%
    summarise(nCol = n(), .groups = "drop"),
  by = c("Year", "Str", "PlotID")
) %>%
  mutate(
    Year = factor(Year, cYear),
    Str = factor(Str, levels = cStr[1:nStr]),
    nCol = ifelse(is.na(nCol), 0, nCol)
  )

```

## Estimate New Colonies

Use a linear regression.

```{r EstNewCol}
# X <- model.matrix(~Year + Str/KMSq - 1, data = NewCol)
# X <- X[,c(1,2,5,6,7)]
# X[] <- ifelse(is.infinite(X), 0, X)
tNewCol <- NewCol %>%
  mutate(
    YrStr = paste(Year, Str, sep = ".")
  )

NewColMdl <- lm(nCol ~ YrStr - 1, 
          #      weight = KMSq, 
          data = tNewCol)
summary(NewColMdl)
NewColMn <- coefficients(NewColMdl)
NewColSD <- sqrt(diag(vcov(NewColMdl)))


```

Get the nonsample plots

```{r NonSmpPlots}
tPlot <- expand_grid(Year = factor(cYear, cYear), Plot %>%
                       select(Str, PlotID, KMSq))
NonSmpCol <- anti_join(
  tPlot ,
  NewCol %>%
    select(Year, Str, PlotID),
  by = c("Year", "Str", "PlotID")
) 

```

Make a simple summary of the new colonies. Use linear regression to get the density of colonies and their SDs. We use the finite sample to only predict the number and SD of colonies in the non-sampled plots.

```{r ExpansionFactors}
tNewCol <-   NewCol %>%
  group_by(Year, Str) %>%
  summarize(
    nPlot = n(),
    SmpCol = sum(nCol),
    SmpKMSq = sum(KMSq),
    .groups = "drop"
  )
tNonSmpCol <-  NonSmpCol %>%
  group_by(Year, Str) %>%
  summarize(NSPlot = n(),
            NSKMSq = sum(KMSq),
            .groups = "drop")

NewSmry <- inner_join(tNewCol, tNonSmpCol, by = c("Year", "Str")) %>%
  mutate(
    ColDen = NewColMn,
    ColSD = NewColSD,
    nCol = SmpCol + ColDen * NSKMSq,
    nColSD = ColSD * NSKMSq
  )
 
knitr::kable(NewSmry[, 1:5], digits = c(0, 0, 0, 1, 0), caption = "Area Plot Summaries")
knitr::kable(NewSmry[, c(1, 2, 3, 7:10)], digits = c(0, 1, 0, 4, 4, 1, 1))

```

Get the Area frame. Nests are nests for sampling weights Note that we may need `nColonies`, `nAct`, and `nNest`

All known and new colony list to use in `FWSColonyID` factor. FS is frame-stratum.

```{r AllColonies}
# Make the year-frame-stratum levels
cFS <- apply(expand_grid(Year = cYear, Frame = cFrame, Str = cDFStr), 1, function(x)
  paste(x[1], x[2], x[3], sep = "."))

# I was using nest but did all the prep on SmpColObs
tSmpCol <- SmpColObs %>%
  mutate(Year = factor(Year, cYear),
    FS = factor(paste(Year, Frame, Str, sep = "."), cFS),
    InSmp = TRUE) %>%
  select(Year, FWSColonyID, Frame, Str, FS, InSmp)

tNonSmpCol <- anti_join(
  Colony %>%
    select(Year, FWSColonyID, Str, PlotID) %>%
    mutate(
      Frame = "List",
      Year = factor(Year, cYear),
      Str = factor(Str, cDFStr),
      FS = factor(paste(Year, Frame, Str, sep = "."), cFS),
      InSmp = FALSE
    ) %>%
    select(Year, FWSColonyID, Frame, Str, FS, InSmp),
  tSmpCol,
  by = c("Year", "FWSColonyID")
)

AllCol <- distinct(bind_rows(tSmpCol, tNonSmpCol)) %>%
  arrange(Year, FWSColonyID)
rm(tSmpCol, tNonSmpCol)

```

Get the colony IDs, including the new.

```{r ColonyIDs}
cFWSColonyID <- sort(unique(AllCol$FWSColonyID))
AllCol$FWSColonyID <- factor(AllCol$FWSColonyID, cFWSColonyID)
Col2FS <- as.integer(AllCol$FS)
Col2Year <- as.numeric(AllCol$Year)
Col2Str <- as.numeric(AllCol$Str)
nAllCol <- nrow(AllCol)

```

Make factors of the colony ID and the year-frame-stratum

```{r FSIndices}
SmpColObs$FWSColonyID <- factor(SmpColObs$FWSColonyID, cFWSColonyID)
SmpColObs$FS <-
  with(SmpColObs, factor(paste(Year, Frame, Str, sep = "."), cFS))
SmpColObs$fSeat <- factor(SmpColObs$Seat, c("Front", "Dirt", "Rear"))
SmpColObs$Act <- ifelse(is.na(SmpColObs$Act), 0, SmpColObs$Act)

# For now just get the max and don't worry about seat
SmpNestObs <- SmpColObs %>%
  mutate(
    Act = ifelse(is.na(Act), 0, Act)
  ) %>%
  group_by(Year, Frame,Str,FWSColonyID) %>%
  summarize(
    Nest = max(Nest),
    Act = max(Act, na.rm = TRUE),
    .groups = "drop"
  )

```

Model list nests per colony with only stratum and frame effects. It should use mdl2. Fix

The overall mean model is best by AIC, so we do not have to distinguish among frames of strata.

```{r ModelNestPerColony}
NestMdl0 <-
  lm(Nest ~ 1, data = SmpColObs)
summary(NestMdl0)
NestMdlStr <-
  lm(Nest ~ Str+-1, data = SmpColObs)
summary(NestMdlStr)
lm(Nest ~ Str+-1, data = SmpColObs)
NestMdlFS <-
  lm(Nest ~ FS - 1, data = SmpColObs)
summary(NestMdlFS)
AIC(NestMdl0, NestMdlStr, NestMdlFS)

# Mdl0 estimate and SD
# Need zeros for the year-frame-stratum with no new colonies.
cCoef <- stringr::str_replace(names(coefficients(NestMdlFS)), "FS", "")
FSEst <- rep(0, length = length(cFS))
names(FSEst) <- cFS
FSSD <- FSEst
FSEst[cCoef] <- as.numeric(coefficients(NestMdlFS))
FSSD[cCoef] <- as.numeric(sqrt(diag(vcov(NestMdlFS))))

```

Summarize the number of nests as the multiplication of two random variables. For the SD use Goodman(1960) but gave unreasonable results, so used simulations.

```{r NestSmry}
NestSmry <- bind_rows(
  LstSmry %>%
    mutate(Year = factor(Year, cYear),
           Frame = factor("List", cFrame)) %>%
    select(Year, Frame, Str, nCol = nLstCol, nColSD = nLstColSD),
  NewSmry %>%
    mutate(Frame = factor("Area", cFrame)) %>%
    select(Year, Frame, Str, nCol, nColSD)
) %>%
  mutate(
    NestPerCol = FSEst,
    NestPerColSD = FSSD,
    NestMn = nCol * NestPerCol,
    NestSD = (
      nCol ^ 2 * nColSD ^ 2 +
        NestPerCol ^ 2 * NestPerColSD ^ 2 -
        nColSD ^ 2 * NestPerColSD ^ 2
    )
  ) %>%
  arrange(Year, Frame, Str)

# The
nSim < -10 ^ 5
setnsims(nSim)
nCol <- rvnorm(mean = NestSmry$nCol, sd = NestSmry$NestPerColSD)
NestPerCol <- rvnorm(mean = FSEst, sd = FSSD)
Nests <- nCol * NestPerCol
NestSmry$NestMn <- pmax(0, rvmean(Nests))
NestSmry$NestSD <- rvsd(Nests)
knitr::kable(NestSmry, digits = c(0, 0, 0, 0, 1, 2, 2, 0, 1),
             caption = "Nest per Colony Summary")

```

Model the number of active nests per colony. The year-frame-stratum model is best.

```{r ModelActPerColony}
ActMdl0 <-
  lm(Act ~ 1, data = SmpColObs)
summary(ActMdl0)
ActMdlYrStr <-
  lm(Act ~ Year + Str+-1, data = SmpColObs)
summary(ActMdlYrStr)

ActMdlFS <-
  lm(Act ~ FS - 1, data = SmpColObs)
summary(ActMdlFS)

# Use the YrStr
AIC(ActMdl0, ActMdlYrStr, ActMdlFS)

# MdlFS estimate and SD
cCoef <- stringr::str_replace(names(coefficients(NestMdlFS)), "FS", "")
FSEst <- rep(0, length = length(cFS))
names(FSEst) <- cFS
FSSD <- FSEst
FSEst[cCoef] <- as.numeric(coefficients(ActMdlFS))
FSSD[cCoef] <- as.numeric(sqrt(diag(vcov(ActMdlFS))))

FSEst <- as.numeric(coefficients(ActMdl0))
FSSD <- as.numeric(sqrt(vcov(ActMdl0)))

```

Summarize the number of anctive nests as the multiplication of two random variables.

```{r ActSmry}
ActSmry <- bind_rows(
  LstSmry %>%
    mutate(
      Year = factor(Year, cYear),
      Frame = factor("List", cFrame)
    ) %>%
    select(Year, Frame, Str, nCol = nLstCol, nColSD = nLstColSD),
  NewSmry %>%
    mutate(Frame = factor("Area", cFrame)) %>%
    select(Year, Frame, Str, nCol, nColSD)
)  %>%
  mutate(
    ActPerCol = FSEst,
    ActPerColSD = FSSD,
    ActMn = nCol * ActPerCol,
    ActSD = (
      nCol ^ 2 * nColSD ^ 2 +
        ActPerCol ^ 2 * ActPerColSD ^ 2 -
        nColSD ^ 2 * ActPerColSD ^ 2
    )
  ) %>%
  arrange(Year, Frame, Str)

# Simulate the product of the number of colonies and the 
# active per colony
nSim < -10 ^ 5
setnsims(nSim)
nCol <- rvnorm(mean = ActSmry$nCol, sd = ActSmry$ActPerColSD)
ActPerCol <- rvnorm(mean = FSEst, sd = FSSD)
Act <- nCol * ActPerCol
ActSmry$ActMn <- pmax(0, rvmean(Act))
ActSmry$ActSD <- rvsd(Act)
knitr::kable(ActSmry, digits = c(0, 0, 0, 0, 1, 2, 2, 0, 1),
             caption = "Active Nest per Colony Summary")

```

Set up the observers for observer detection. Put ground last and set detection to one. Make a sort function for the observers to sort by last then first name.

```{r ObserverName}
LastFirst <- function(str) {
  nc <- nchar(str)
  paste(substr(str, nc, nc), substr(str, 1, nc - 1), sep = "")
}
cObsr <- unique(as.character(SmpColObs$Obsr))
cObsr <- cObsr[order(LastFirst(cObsr))]

```

Get all the observers including the ground, then make all observer seat combinations. Danielle D'Auria was the only front seat observer.

```{r ObserverSeat}
cObsr <- c(cObsr[cObsr != "Gnd"], "Gnd")
SmpColObs$Obsr <- factor(SmpColObs$Obsr, levels = cObsr)
nObsr <- nlevels(SmpColObs$Obsr)

ObsrSeat <- tRecObs %>%
  select(Front, Rear) %>%
  gather("Seat", "Obsr") %>%
  group_by(Seat, Obsr) %>%
  summarize(nObs = n(), .groups = "drop") %>%
  mutate(LstFrst = LastFirst(Obsr)) %>%
  arrange(LstFrst, Seat) %>%
  select(Obsr, Seat, nObs)

```

Make the capture history matrix for data augmentation. Put different rear-seat observers in the area frame

```{r RearObserverIndex}
RearAreaObsr <- unique(RecObsArea$Rear)
Idx <- order(LastFirst(RearAreaObsr))
RearAreaObsr <- RearAreaObsr[Idx]
nRearAreaObsr <- length(RearAreaObsr)
cCHCol <- c("01", "10", "11", "00")
rm(Idx)

```

Extract capture histories

```{r CaptureHistories}
OSCmb <- tRecObs %>%
  filter(!is.na(CapHist)) %>%
  select(Str, PlotID, FWSColonyID, Front, Rear, #  Lng,Lat,AOU,
         CapHist) %>%
  mutate(
    Str = as.character(Str),
    inCNA = ifelse(grepl("ME", FWSColonyID), FALSE, TRUE),
    OSCmb = paste(Front, Rear, sep = "."),
    CH = gsub("x", "0", ifelse(
      CapHist == "", "00", substring(CapHist, 2, 3)
    ))
  ) %>%
  group_by(Str, inCNA, OSCmb, Front, Rear, FWSColonyID, CapHist, CH) %>%
  summarise(N = n(), .groups = "drop") %>%
  pivot_wider(
    names_from = "CH",
    values_from = "N",
    values_fill = 0,
    names_repair = "minimal"
  ) %>%
  mutate(
    `01` = 0
  ) %>%
  # Could just set to zero
  mutate(`00` = ifelse(`01` > 0 |
                         `10` > 0 | `11` > 0, 0, 1))

```

There are so few capture histories and no rear-seat only observations, `01`, just collapse all the rear observers. Two of the nests were sighted twice.

```{r ObsDet}
tX.Smp <- OSCmb %>%
  filter(grepl("[Xx]1", CapHist)) %>%
  summarise(
    nCapHist = n(),
    x01 = sum(`01`),
    x10 = sum(`10`),
    x11 = sum(`11`)
  )
X.Smp <- as.numeric(tX.Smp[-1])
names(X.Smp) <- colnames(tX.Smp)[-1]
Parm0 <- c(pf = 0.95, pr = 0.3)
CRC(Parm0, X = X.Smp)


Est <- optim(
  par = Parm0,
  fn = CRC,
  X = X.Smp,
  method =
    # "CG",
    # "Nelder-Mead",
    # "SANN",
    "L-BFGS-B",
  lower = c(0.0001, 0.0001),
  upper = c(0.9999, 0.9999),
  control = list(maxit = 10000,
                 #    reltol = 1e-10),
                 hessian = TRUE
  ))
  
Est
DetPN <- tribble( ~ Pf, ~ Pr, ~ N,
                  0, 0, 0)
tmp <- c(round(Est$par, 2), N=currentN)
names(tmp) <- c("Pf", "Pr", "N")
DetPN[1, 1:3] <- as.list(tmp)
knitr::kable(DetPN, digits =2,
             caption = "Front-Rear Observer Detection Estimates")

```

## Save data and estimates to use with the 

```{r SaveEst}
save(
  cDFStr,
  nStr,
  cStr,
  Colony,
  cFrame,
  RecObsList,
  LstSmry,
  RecObsArea,
  LstData,
  LstEst,
  NewSmry,
  SmpColObs,
  NestSmry,
  ActSmry,
  ObsrSeat,
  cObsr,
  RearAreaObsr,
  nRearAreaObsr,
  cCHCol,
  OSCmb,
  DetPN,
  file = here::here("output/CochranEst.RData")
)

```
