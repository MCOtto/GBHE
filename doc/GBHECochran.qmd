---
title: "GBHE 2015 and 2023 Dual-Frame Survey Estimation"
author: "Mark C. Otto. 28 June 2024"
format: pdf
editor: visual
---

## Introduction

The Great Blue Heron (Ardea herodias) is still a species of Special Concern in the State of Maine, USA as it continues its decline beginning in 1995 (D'Auria 2010). We follow D'Auria and Otto 2017



Use simple dual-frame analysis for the Great Blue Heron Dual-frame survey 2023 Estimation. This a simple binomial estimation of the known nests per stratum and extrapolating to the number of known nests.

For the detection for the many rear seat observers, there were few capture histories and no rear-seat only observations. We only assume front- and rear-seat probabilities and use non-linear optimization routine to calculate the observer probabilities and the number that both observers missed. The last is a nuisance parameters because capture histories were not taken on all the colony observations.

For new nest estimation, we use a random effects Poisson model to estimate the density of new colonies by stratum. In two strata, no new colonies were found. Another Poisson model is used to estimate the number of nests per colonies and a binomial model for the number of active nests per colony. These two model we assume the known and new nest rates are the same. We could think that new colonies would have lower numbers of nests because they would have been found the larger they are. We do not have the data to assess this. We are more comfortable with the proportion of active nests being the same between known and new colonies.

```{r Setup}
# Project directory is "/Users/MOtto/Profesional/GBHE"
# knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# The above did not work.
ProjDir <- rprojroot::find_rstudio_root_file()
library(sf)
library(MASS)
library(DualFrame)
library(CollisionModel)
# library(Dist). # I could not get the S4 object to work
library(dplyr)
library(tidyr)
library(rv)
library(xlsx)

```

Source my functions on logit, inverse logit, and the summary statistics to print out. The `MkSmry` takes the confidence intervals to use. Finally, set the file name of the model to use that also defines the output to write. `lEst` means estimate the model even if the model results file, \`MCMC\` exists.

```{r VariableSet}
source("~/Ref/RLib/logit.R")
source("~/Ref/RLib/expit.R")
source("../R/Beta.R")
source("../R/CRC.R")
cMdl <- "Cochran"
Probs <- c(0.5, 0.05, 0.95)
source(here::here("R/MkSmry.R"))
File <- here::here(paste("doc/Notes/", cMdl, ".xlsx", sep = ""))
SimFile <- here::here(paste("TmpData/", cMdl, ".PS.RData", sep = ""))
lEst <- TRUE

# Load the data
load(file = here::here("output/GBHE.RData"))

```

Define the strata, stratum labels, and areas. By adding Total to the labels, be careful that they are used for the tables and remove when identifying the strata themselves.

```{r Strata}
cDFStr <- as.character(StrSF$Str_FK)
nStr <- length(cDFStr)
cStr <- c(cDFStr, "Total")

```

Get the `List` frame from `../ori/2023ForMarkOtto/ListFrameNewPlots.shp` shape file created in `NewColonies.R`. This is the list of numbers of known colonies in each plot.

```{r, KnownNestPlots}
LstCol2 <- st_drop_geometry(ColonySF) %>%
  mutate(Str = Str_FK) %>%
  group_by(Year, Str) %>%
  summarize(nCol = n(), .groups = "drop")

```

The listdata frames are from the SQLite database. Need to combine the observations with GRTSSmp

List: OBJECTID, Svy, Year, LstStr, PlotID, siteID, Front, Rear, CapHist, Status, fNest, rNest, fAct, rAct, FWSColonyID

Include `CapHist`.

```{r GetListObs}
cFrame <- c("List", "Area")

RecObsList <- RecObs %>%
  filter(!(siteID == "OOS" | is.na(FWSColonyID) | grepl("new", FWSColonyID))) %>%
  mutate(
    Frame = factor("List", cFrame),
    ColID = FWSColonyID,
    # Nests in bald eagle survey are colonies
    StrPltID = paste(PlotID, Str, sep = "."),
        Str = factor(Str, cDFStr)
  ) %>%
  select(Year,
         Frame,
         Year,
         Str,
         StrPltID,
         ColID,
         Front,
         Rear,
         CapHist,
         fNest,
         rNest,
         fAct,
         rAct)

```

Make a simple summary of the list colonies. Use the conjugate Beta-Binomial to get the proportion and number of occupied and active colonies, their SDs. We use the finite sample where we only predict the number and SD of colonies in the non-sampled colonies.

```{r ListSmry}
tLstSmry <- RecObsList %>%
  group_by(Year, Str) %>%
  summarize(
    # Need to fix the list because it should not be larger than the colonies
    # sampled.
    nColSmp = n(),
    nNestCol = sum(fNest > 0 | rNest > 0, na.rm = TRUE),
    nActCol = sum(fAct > 0 | rAct > 0, na.rm = TRUE),
    .groups = "drop"
  )

LstSmry <- inner_join(tLstSmry, LstCol2, by = c("Year", "Str")) %>%
  mutate(
    # Need to fix the list because it should not be larger than the colonies
    # sampled.
    nCol = pmax(nCol, nColSmp + 1),
    nColNS = nCol - nColSmp,
    pCol = NA,
    pColSD = NA,
    nLstCol = NA,
    nLstColSD = NA,
    pAct = NA,
    pActSD = NA,
    nLstAct = NA,
    nLstActSD = NA
  ) %>%
  select(
    Str,
    nCol,
    nColSmp,
    nNestCol,
    nActCol,
    nColNS,
    pCol,
    pColSD,
    nLstCol,
    nLstColSD,
    pAct,
    pActSD,
    nLstAct,
    nLstActSD
  )
nYrStr <- nrow(LstSmry)
# Arrrrgh will not let Beta work on vectors.
for (iYrStr in 1:nYrStr) {
  # iYrStr <- 1
  
  # Estimated number of colonies
  tBeta <- Beta(nu = 1 + LstSmry[iYrStr, "nNestCol"], nup = 1 + LstSmry[iYrStr, "nColSmp"] - LstSmry[iYrStr, "nNestCol"])
  LstSmry[iYrStr, "pCol"] <- attr(tBeta, "Mean")
  LstSmry[iYrStr, "pColSD"] <- attr(tBeta, "SD")
  LstSmry[iYrStr, "nLstCol"] <- LstSmry[iYrStr, "nNestCol"] +
    LstSmry[iYrStr, "pCol"] * LstSmry[iYrStr, "nColNS"]
  LstSmry[iYrStr, "nLstColSD"] <- LstSmry[iYrStr, "pColSD"] * LstSmry[iYrStr, "nColNS"]
  
  # Estimated number of active colonies
  tBeta <- Beta(nu = 1 + LstSmry[iYrStr, "nActCol"], nup = 1 + LstSmry[iYrStr, "nColSmp"] - LstSmry[iYrStr, "nActCol"])
  LstSmry[iYrStr, "pAct"] <- attr(tBeta, "Mean")
  LstSmry[iYrStr, "pActSD"] <- attr(tBeta, "SD")
  LstSmry[iYrStr, "nLstAct"] <- LstSmry[iYrStr, "nActCol"] +
    LstSmry[iYrStr, "pAct"] * LstSmry[iYrStr, "nColNS"]
  LstSmry[iYrStr, "nLstActSD"] <- LstSmry[iYrStr, "pActSD"] * LstSmry[iYrStr, "nColNS"]
}

knitr::kable(LstSmry[, 1:5], digits = 2)
knitr::kable(LstSmry[, c(1, 7:10)], digits = 2)
knitr::kable(LstSmry[, c(1, 11:14)], digits = 2)
```

The two frames are the List with the plots of known colonies, and the Area for all plots with the number of new colonies.

Area: OBJECTID, Svy, Year, AreaStr, PlotID, siteID, Front, Rear, CapHist", fNest, rNest, fAct, rAct, FWSColonyID

Include `CapHist`.

```{r GetSamplePlots}
RecObsArea <-   RecObs %>%
    filter(!is.na(Str) & !siteID != "OOS" & grepl("new", FWSColonyID)) %>%
    mutate(
      Frame = factor("Area", cFrame),
      Str = factor(Str, cDFStr),
      # GBHE colonies are nests in bald eagle survey.
      StrPltID = paste(PlotID, Str, sep = ".")
    ) %>%
    select(
      Frame,
      Year,
      Str,
      StrPltID,
      ColID = FWSColonyID,
      Front,
      Rear,
      CapHist,
      fNest,
      rNest,
      fAct,
      rAct
    )

tRecObs <- bind_rows(
  RecObsList,
  RecObsArea
)

```

Get the new sample observations. Are duplicate observations of nests. `0822` at least has different observers.

```{r NewObservations}
NewSmpObs <- tRecObs %>%
  filter(grepl("new", ColID))

filter((tRecObs), ColID %in% c("ME.0742", "ME.0822", "ME.0622"))
tRecObs <- unique(tRecObs)

```

Gather the observations by observer.

```{r SampleColonies}
tSmpColObs <- rbind(
  tRecObs %>%
    mutate(
      Seat = "Front",
      Obsr = Front,
      Nest = fNest,
      Act = fAct
    ) %>%
    select(Frame, Str, StrPltID, ColID, Obsr, Seat, Nest, Act),
  tRecObs %>%
    mutate(
      Seat = "Rear",
      Obsr = Rear,
      Nest = rNest,
      Act = rAct
    ) %>%
    select(Frame, Str, StrPltID, ColID, Obsr, Seat, Nest, Act)
)

```

Load the ground truth data. Some of the ground observations have NAs for active counts.

Check the original data.

```{r GroundObservations}
rownames(GndObs) <- GndObs$ColID

# These are where the ground observations are less than the fixed wing.
TruthLess <- inner_join(
  GndObs %>%
    filter(InSmp),
  tSmpColObs %>%
    dplyr:::select(Str, ColID, Obsr, Nest, Act),
  by = c("ColID")
) %>%
  filter(Nest.x < Nest.y | Act.x < Act.y) %>%
  dplyr:::select(Str.x, ColID, Nest.x, Nest.y, Act.x, Act.y)

```

Add the ground observations. These do include ground observations less than the fix with. Some aerial counts may be higher than the ground truth, so use a Poisson rather than a binomial, so the observed `n` is not a fixed upper limit in the model.

```{r ColoniesWithGround}
SmpColObs <- rbind(
  tSmpColObs,
  GndObs %>%
    filter(InSmp) %>%
    select(Year, Frame, Str, StrPltID, ColID, Obsr, Seat, Nest, Act)
) %>%
  arrange(Year, Frame, Str, StrPltID, ColID, Seat, Obsr)

```

Need to remove the training flight of `DD` and `DK` on `ME.0822`.

```{r SmpColObs}
if(cYear=="2015") {
  SmpColObs %>%
    filter(ColID == "ME.0822")
  # Check.  Can't separate out DD in the two observations, so use row names
  SmpColObs %>%
    filter(!rownames(SmpColObs) %in% c("GBHE.SC. 84", "GBHE.SC. 841"))
  
  SmpColObs <- SmpColObs %>%
    filter(!rownames(SmpColObs) %in% c("GBHE.SC. 84", "GBHE.SC. 841"))
}

```

## Estimation

Use the counts in a random effects Poisson model to estimate the stratum rates. Let the proportion of active colonies be Act\[s,o\] == 0.

```{r ListEst}
LstData <- SmpColObs %>%
  filter(Frame == "List") %>%
  mutate(Seat = factor(Seat, c("Dirt", "Front", "Rear")),
         fSeat = relevel(Seat, "Front"))
LstEst <- LstData %>%
  mutate(
    Occ = Act > 0
  ) %>%
  group_by(Str) %>%
  summarise(n = sum(!is.na(Act)), 
            pOcc = mean(Occ, na.rm = TRUE), SD = sd(Occ, na.rm = TRUE),
            NestMn = mean(Nest, na.rm = TRUE), NestSD = sd(Nest, na.rm = TRUE),
            ActMn = mean(Act, na.rm = TRUE), ActSD = sd(Act, na.rm = TRUE)) %>%
  mutate(
            pAct = ActMn / NestMn
  )

```

Estimate the density and number of colonies

```{r ActivePerColony}
setwd(ProjDir)
data(GRTSSmp)

tGRTSArea <- inner_join(
  GRTSSmp %>%
    filter(SmpType != "list") %>%
    mutate(PlotID = stringr::str_sub(PltStrID, 9, 13)) %>%
    select(Str = stratum, PlotID, KMSq),
  GRTSArea %>%
    filter(as.logical(Smpd)) %>%
    select(Str = AreaStr, PlotID),
  by = c("Str", "PlotID")
)

NewCol <- left_join(
  tGRTSArea,
  SmpColObs %>%
    filter(Frame == "Area") %>%
    mutate(PlotID = stringr::str_sub(StrPltID, 1, 5)) %>%
    distinct(Str, PlotID, ColID) %>%
    group_by(Str, PlotID) %>%
    summarise(nCol = n(), .groups = "drop"),
  by = c("Str", "PlotID")
) %>%
  mutate(Str = factor(Str, levels = cStr[1:nStr]),
         nCol = ifelse(is.na(nCol), 0, nCol))

```

## Estimate New Colonies

Use a linear regression.

```{r EstNewCol}
X <- model.matrix(~Str/KMSq - 1, NewCol)
X <- X[,nStr + 1:nStr]
X[] <- ifelse(is.infinite(X), 0, X)

NewColMdl <- lm(nCol ~ X -1,  weight = KMSq, 
                data = NewCol)
summary(NewColMdl)
NewColMn <- coefficients(NewColMdl)
NewColSD <- sqrt(diag(vcov(NewColMdl)))

```

Get the nonsample plots

```{r NonSmpPlots}
NonSmpCol <- anti_join(
  Plot %>%
    select(Str = AreaStr,
           PlotID,
           KMSq),
  NewCol %>%
    select(-nCol),
  by = c("Str", "PlotID")
) 

```

Make a simple summary of the new colonies. Use linear regression to get the density of colonies and their SDs. We use the finite sample to only predict the number and SD of colonies in the non-sampled plots.

```{r ExpansionFactors}
NewSmry <- inner_join(
  NewCol %>%
    group_by(Str) %>%
    summarize(
      nPlot = n(),
      SmpCol = sum(nCol),
      SmpKMSq = sum(KMSq)
    ),
  NonSmpCol %>%
    group_by(Str) %>%
    summarize(NSPlot = n(), NSKMSq = sum(KMSq)),
  by = "Str"
) %>%
  mutate(
    ColDen = NewColMn,
    ColSD = NewColSD,
    nCol = SmpCol + ColDen * NSKMSq,
    nColSD = ColSD * NSKMSq
  )

knitr::kable(NewSmry[,1:5], digits = c(0, 0, 0, 1, 0))
knitr::kable(NewSmry[,c(1,3,7:10)], digits = c(0, 0, 4, 4, 1, 1))

```

Get the Area frame. Nests are nests for sampling weights Note that we may need `nColonies`, `nAct`, and `nNest`

All known and new colony list to use in `ColID` factor. FS is frame-stratum.

```{r AllColonies}
cFS <- apply(expand.grid(Str = cDFStr, Frame = cFrame), 1, function(x)
  paste(x[2], x[1], sep = "."))

# I was using nest but did all the prep on SmpColObs
tSmpCol <- SmpColObs %>%
  mutate(FS = factor(paste(Frame, Str, sep = "."), cFS)) %>%
  select(ColID, Frame, Str, FS)

tNonSmpCol <- anti_join(
  Nest %>%
    mutate(
      ColID = FWSColonyID,
      Frame = "List",
      Str = factor(LstStr, cDFStr),
      FS = factor(paste(Frame, Str, sep = "."), cFS)
    ) %>%
    select(ColID, Frame, Str, FS),
  tSmpCol,
  by = "ColID"
)

AllCol <- distinct(bind_rows(tSmpCol, tNonSmpCol)) %>%
  arrange(ColID)
rm(tSmpCol, tNonSmpCol)

```

Get the colony IDs, including the new.

```{r ColonyIDs}
cColID <- sort(unique(AllCol$ColID))
AllCol$ColID <- factor(AllCol$ColID, cColID)
Col2FS <- as.integer(AllCol$FS)
Col2Str <- as.numeric(AllCol$Str)
nAllCol <- nrow(AllCol)

```

Make factors of the colony ID and the frame-stratum

```{r FSIndices}
SmpColObs$ColID <- factor(SmpColObs$ColID, cColID)
SmpColObs$FS <-
  with(SmpColObs, factor(paste(Frame, Str, sep = "."), cFS))
SmpColObs$fSeat <- factor(SmpColObs$Seat, c("Front", "Dirt", "Rear"))
SmpColObs$Act <- ifelse(is.na(SmpColObs$Act), 0, SmpColObs$Act)

# For now just get the max and don't worry about seat
SmpNestObs <- SmpColObs %>%
  mutate(
    Act = ifelse(is.na(Act), 0, Act)
  ) %>%
  group_by(Frame,Str,ColID) %>%
  summarize(
    Nest = max(Nest),
    Act = max(Act, na.rm = TRUE),
    .groups = "drop"
  )

```

Model list nests per colony with only stratum and frame effects. It should use mdl2. Fix

The overall mean model is best by AIC, so we do not have to distinguish among frames of strata.

```{r ModelNestPerColony}
NestMdl0 <-
  lm(Nest ~ 1, data = SmpColObs)
summary(NestMdl0)
NestMdlStr <-
  lm(Nest ~ Str+-1, data = SmpColObs)
summary(NestMdlStr)
lm(Nest ~ Str+-1, data = SmpColObs)
NestMdlFS <-
  lm(Nest ~ Str + Frame - 1, data = SmpColObs)
summary(NestMdlFS)
AIC(NestMdl0, NestMdlStr, NestMdlFS)

# Mdl0 estimate and SD
FSEst <- as.numeric(coefficients(NestMdl0))
FSSD <- as.numeric(sqrt(vcov(NestMdl0)))

# # For the NestMdlStr
# FSEst <- coefficients(NestMdlStr)
# FSSD <- vcov(NestMdlStr)
# 
# # For the NestMdlFS model
# ToStr <- rbind(cbind(diag(nStr), 0), cbind(diag(nStr), 1))
# FSEst <- ToStr %*% coefficients(NestMdlStr)
# FSSD <- sqrt(diag(ToStr %*% vcov(NestMdlStr) %*% t(ToStr)))
# nSim<-100000; nNest <- rpois(nSim, pmax(0, rnorm(nSim, 0, 10.7)));summary(nNest); mean(nNest == 0)

```

Summarize the number of nests as the multiplication of two random variables. For the SD use Goodman(1960) but gave unreasonable results, so used simulations.

```{r NestSmry}
NestSmry <- bind_rows(
  LstSmry %>%
    mutate(Frame = "List", ) %>%
    select(Frame, Str, nCol = nLstCol, nColSD = nLstColSD),
  NewSmry %>%
    mutate(Frame = "Area", ) %>%
    select(Frame, Str, nCol, nColSD)
) %>%
  mutate(
    NestPerCol = FSEst,
    NestPerColSD = FSSD,
    NestMn = nCol * NestPerCol,
    NestSD = (
      nCol ^ 2 * nColSD ^ 2 +
        NestPerCol ^ 2 * NestPerColSD ^ 2 -
        nColSD ^ 2 * NestPerColSD ^ 2
    )
    
  )

# The
nSim < -10 ^ 5
setnsims(nSim)
nCol <- rvnorm(mean = NestSmry$nCol, sd = NestSmry$NestPerColSD)
NestPerCol <- rvnorm(mean = FSEst, sd = FSSD)
Nests <- nCol * NestPerCol
NestSmry$NestMn <- pmax(0, rvmean(Nests))
NestSmry$NestSD <- rvsd(Nests)
knitr::kable(NestSmry, digits = c(0, 0, 0, 1, 2, 2, 0, 1))

```

Model the number of active nests per colony. The over all mean model is best.

```{r ModelActPerColony}
ActMdl0 <-
  lm(Act ~ 1, data = SmpColObs)
summary(ActMdl0)
ActMdlStr <-
  lm(Act ~ Str+-1, data = SmpColObs)
summary(ActMdlStr)
lm(Act ~ Str+-1, data = SmpColObs)
ActMdlFS <-
  lm(Act ~ Str + Frame - 1, data = SmpColObs)
summary(ActMdlFS)
AIC(ActMdl0, ActMdlStr, ActMdlFS)

# Mdl0 estimate and SD
FSEst <- as.numeric(coefficients(ActMdl0))
FSSD <- as.numeric(sqrt(vcov(ActMdl0)))

# # For the ActMdlStr
# FSEst <- coefficients(ActMdlStr)
# FSSD <- vcov(ActMdlStr)
# 
# # For the ActMdlFS model
# ToStr <- rbind(cbind(diag(nStr), 0), cbind(diag(nStr), 1))
# FSEst <- ToStr %*% coefficients(ActMdlStr)
# FSSD <- sqrt(diag(ToStr %*% vcov(ActMdlStr) %*% t(ToStr)))
```

Summarize the number of anctive nests as the multiplication of two random variables.

```{r ActSmry}
ActSmry <- bind_rows(
  LstSmry %>%
    mutate(Frame = "List", ) %>%
    select(Frame, Str, nCol = nLstCol, nColSD = nLstColSD),
  NewSmry %>%
    mutate(Frame = "Area", ) %>%
    select(Frame, Str, nCol, nColSD)
) %>%
  mutate(
    ActPerCol = FSEst,
    ActPerColSD = FSSD,
    ActMn = nCol * ActPerCol,
    ActSD = (
      nCol ^ 2 * nColSD ^ 2 +
        ActPerCol ^ 2 * ActPerColSD ^ 2 -
        nColSD ^ 2 * ActPerColSD ^ 2
    )
    
  )

# Simulate the product of the number of colonies and the 
# active per colony
nSim < -10 ^ 5
setnsims(nSim)
nCol <- rvnorm(mean = ActSmry$nCol, sd = ActSmry$ActPerColSD)
ActPerCol <- rvnorm(mean = FSEst, sd = FSSD)
Act <- nCol * ActPerCol
ActSmry$ActMn <- pmax(0, rvmean(Act))
ActSmry$ActSD <- rvsd(Act)
knitr::kable(ActSmry, digits = c(0, 0, 0, 1, 2, 2, 0, 1))

```

Set up the observers for observer detection. Put ground last and set detection to one. Make a sort function for the observers to sort by last then first name.

```{r ObserverName}
LastFirst <- function(str) {
  nc <- nchar(str)
  paste(substr(str, nc, nc), substr(str, 1, nc - 1), sep = "")
}
cObsr <- unique(as.character(SmpColObs$Obsr))
cObsr <- cObsr[order(LastFirst(cObsr))]

```

Get all the observers including the ground, then make all observer seat combinations. Danielle D'Auria was the only front seat observer.

```{r ObserverSeat}
cObsr <- c(cObsr[cObsr != "Gnd"], "Gnd")
SmpColObs$Obsr <- factor(SmpColObs$Obsr, levels = cObsr)
nObsr <- nlevels(SmpColObs$Obsr)

ObsrSeat <- tRecObs %>%
  select(Front, Rear) %>%
  gather("Seat", "Obsr") %>%
  group_by(Seat, Obsr) %>%
  summarize(nObs = n(), .groups = "drop") %>%
  mutate(LstFrst = LastFirst(Obsr)) %>%
  arrange(LstFrst, Seat) %>%
  select(Obsr, Seat, nObs)

```

Make the capture history matrix for data augmentation. Put different rear-seat observers in the area frame

```{r RearObserverIndex}
RearAreaObsr <- unique(RecObsArea$Rear)
Idx <- order(LastFirst(RearAreaObsr))
RearAreaObsr <- RearAreaObsr[Idx]
nRearAreaObsr <- length(RearAreaObsr)
cCHCol <- c("01", "10", "11", "00")
rm(Idx)

```

Extract capture histories

```{r CaptureHistories}
OSCmb <- tRecObs %>%
  filter(!is.na(CapHist)) %>%
  select(Str, StrPltID, ColID, Front, Rear, #  Lng,Lat,AOU,
         CapHist) %>%
  mutate(
    Str = as.character(Str),
    inCNA = ifelse(grepl("ME", ColID), FALSE, TRUE),
    OSCmb = paste(Front, Rear, sep = "."),
    CH = gsub("x", "0", ifelse(
      CapHist == "", "00", substring(CapHist, 2, 3)
    ))
  ) %>%
  group_by(Str, inCNA, OSCmb, Front, Rear, ColID, CapHist, CH) %>%
  summarise(N = n(), .groups = "drop") %>%
  pivot_wider(
    names_from = "CH",
    values_from = "N",
    values_fill = 0,
    names_repair = "minimal"
  ) %>%
  mutate(
    `01` = 0
  ) %>%
  # Could just set to zero
  mutate(`00` = ifelse(`01` > 0 |
                         `10` > 0 | `11` > 0, 0, 1))

```

There are so few capture histories and no rear-seat only observations, `01`, just collapse all the rear observers. Two of the nests were sighted twice.

```{r ObsDet}
tX.Smp <- OSCmb %>%
  filter(grepl("[Xx]1", CapHist)) %>%
  summarise(
    nCapHist = n(),
    x01 = sum(`01`),
    x10 = sum(`10`),
    x11 = sum(`11`)
  )
X.Smp <- as.numeric(tX.Smp[-1])
names(X.Smp) <- colnames(tX.Smp)[-1]
Parm0 <- c(pf = 0.95, pr = 0.3)
CRC(Parm0, X = X.Smp)


Est <- optim(
  par = Parm0,
  fn = CRC,
  X = X.Smp,
  method =
    # "CG",
    # "Nelder-Mead",
    # "SANN",
    "L-BFGS-B",
  lower = c(0.0001, 0.0001),
  upper = c(0.9999, 0.9999),
  control = list(maxit = 10000,
                 #    reltol = 1e-10),
                 hessian = TRUE
  ))
  
Est
DetPN <- tribble( ~ Pf, ~ Pr, ~ N,
                  0, 0, 0)
tmp <- c(round(Est$par, 2), N=currentN)
names(tmp) <- c("Pf", "Pr", "N")
DetPN[1, 1:3] <- as.list(tmp)
knitr::kable(DetPN, digits =2)
      
```
