---
title: "Great Blue Heron Survey 2015 and 2023"
author: "Mark C. Otto"
date: "12 November 2024"
echo: false
format: docx
editor: source
---

## Introduction

## Use Royle and Dorazio, 2008. p. ?--? to

Great blue heron dual-frame survey 2015 and 2023

Estimation with random observer effects

```{r SetUp}
library(MASS)
library(DualFrame)
library(CollisionModel)
library(dplyr)
library(tidyr)
library(lme4)
library(rv)
library(rjags)
library(runjags)
library(modeest)
library(R2WinBUGS)
library(xlsx)
library(ggplot2)

source("/Users/MOtto/Ref/RLib/logit.R")
source("/Users/MOtto/Ref/RLib/expit.R")
source(here::here("R/Beta.R"))
source(here::here("R/MkSmry.R"))

# Load the data
source(file = here::here("data/MetaVars.R"))
load(file = here::here("output/GBHE.RData"))
load(file = here::here("output/SimpleEst.RData"))
Probs <- c(0.5, 0.05, 0.95)
cMdl <- "DFCH"
File <- paste("doc/Notes/", cMdl, ".xlsx", sep = "")
lEst <- FALSE

```

## Loaded Data

```{r LoadedData}
# cFrame, RecObs,RecObsArea, NewSmpObs, SmpColObs GrndObs -> GroundObs, cYFS, AllCol -> AllColonies,
#
#  List nests per colony model: only stratum and frame effects
# YFSEst, YFSVar
# LastFirst, cObsr, nObsr, ObsrSeat
# RearAreaObsr, nRearAreaObsr, cCHCol

```

## Occupancy Proportion

The data come from the list frame `AllObs` observations.  Each colony has the potential for a front, rear, and ground observations.  The nest colony exists if any have a nest and is active if there is at least one active colony.  
For colony occupation estimation, use `LstSmry` that is based on `AllObs` of the colonies in the 

```{r ListOcc}
tSmpColObs <- AllObs %>%
  filter(InSmp)
ColIdx <- sort(unique(tSmpColObs$FWSColonyID))

SmpColObs <- tSmpColObs %>%
  mutate(
    Year = factor(Year, cYear),
    Str = factor(Str, cStr),
    YFS = factor(paste(Year, Frame, Str, sep = "."), cYFS),
    ColID = factor(FWSColonyID, ColIdx)
  )

# Colony indicator to match number of nests in colonies
Obs2Col <- as.numeric(SmpColObs$ColID)
Obs2Obsr <- as.numeric(SmpColObs$Obsr)
Obs2Str <- as.numeric(SmpColObs$Str)

rm(tSmpColObs)

```


```
## Proportion of Active Nests

```{r ActiveNests}
# Dropping `Frame` lowered the AIC.
ActGLM <- glm(cbind(Act, Nest - Act) ~ YFS - 1, 
              data = tSmpColObs, family = binomial)
summary(ActGLM)
ActLME <- glmer(cbind(Act, Nest - Act) ~ 1 + (1 | YFS),
                data = tSmpColObs,
                family = binomial)
summary(ActLME)
AIC(ActGLM, ActLME)

# Fill in the combinations with data
# Estimates are on the log scale.
# Use the unconditional mean and variance to estimate missing
# effects
tActEst <- coef(ActLME)$YFS
ActEst <- rep(NA, nYFS)
names(ActEst) <- cYFS
ActEst[rownames(tActEst)] <-tActEst$"(Intercept)"
NAIdx <- is.na(ActEst)
ActEst[NAIdx] <- mean(ActEst, na.rm = TRUE)
ActVar <- diag(as.numeric(vcov(ActLME)), nYFS) + 
               as.numeric(VarCorr(ActLME))

Sim <- expit(mvrnorm(n = nSim, mu = ActEst , 
                     Sigma = ActVar))
ActLMEEst <- apply(Sim, 2, mean, na.rm = TRUE)
ActLMESD <- apply(Sim, 2, sd, na.rm = TRUE)
pActBeta <- Beta(Mean = mean(ActLMEEst), 
        SD = sqrt(var(ActLMEEst) + mean(ActLMESD ^ 2)))

```
## Observer Detection

```{r ObsrDet}


# Z[ColID]~bernoulli(1|Str);
 ColObs<-unique(SmpColObs[,c("ColID","Frame","Str")])
 cYFS<-apply(expand.grid(Str=cDFStr,Frame=cFrame),1,
  function(x)paste(x[2],x[1],sep=".")
 )
 ColObs<-SmpColObs%>%
   mutate(
    YFS=factor(paste(Frame,Str,sep="."),cYFS),
    GndNest=ifelse(Obsr=="Gnd",Nest,NA)
   )%>%
   group_by(ColID,Frame,Str,YFS)%>%
   summarise(Nest=max(Nest,na.rm=TRUE),Act=max(Act,na.rm=TRUE),
             GndNest=sum(GndNest,na.rm=TRUE)
   )%>%
   arrange(ColID)
 
 Idx<-SmpColObs[SmpColObs$ColID%in%GndObs[GndObs$InSmp,"ColID"],"ColID"]
 ColObs[!ColObs$ColID%in%Idx,"GndNest"]<-NA
 
 ```
 ## New Colony Estimation

```{r NewColonies}
# Number of new colonies by year and stratum: NewSmry
# NewColSmp <- NewSmry$SmpCol # and isn't used.

 occmdl<-glm(I(Nest>0)~Str-1,data=ColObs,family=binomial,
             subset=Frame=="List")
 summary(occmdl )
 OccEst<-coefficients(occmdl)
 OccSD<-sqrt(diag(vcov(occmdl)))
 
 
 

```

## JAGS Data

```{r JAGSData}
# Model data
Data <- list(
  nYrStr = nYrStr,
  nYFS = nYFS,
  nColObs = nrow(SmpColObs),
  nest = SmpColObs$Nest,
  act = SmpColObs$Act,
  Obs2Col = Obs2Col,
  Obs2Obsr = Obs2Obsr,
  newcol = ,
  nCH = nCH,
  nCmb = ncol(xCH),
  xCH = xCH
)

```

## Initial value function

```{r InitialValueFunction}
InitFcn <- function(iChain) {
  # Colony occupancy proportion random effect Beta parameters
  ColPsiNu <- pmax(0.6, pmin(100, rnorm(
    n = nYrStr,
    mean = LstSmry[, "NestColNu"]$NestColNu,
    sd = LstSmry[, "NestColNu"]$NestColNu / 10
  )))
  ColPsiNup <- pmax(0.6, pmin(100, rnorm(
    n = nYrStr,
    mean = LstSmry[, "NestColNup"]$NestColNup,
    sd = LstSmry[, "NestColNup"]$NestColNup / 10
  )))
  
  # The proportion of observed colonies, ColZ
  nCHSeen <- 39
  ColPsi0 <- rbeta(nYrStr, ColPsiNu, ColPsiNup)
  
  ColZ <- c(rep(1, length = nLstCol),
            rep(1, length = nCapHistAug - nCHSeen)
            # rbinom(nCapHistAug - nCHSeen, size = 1, prob = ColPsi0)
            )
            
  pNest2Col <- rbeta(1, 9, 1)
  
  # Nest per colony stratum + year model
  lnNpCYFS <- mvrnorm(n = 1, mu = NpCEst, Sigma = NpCVar)
  
  # Colony nestws proportion active random effect Beta parameters
  pActNu <- rnorm(1, pActBeta$nu, pActBeta$nu / 10)
  pActNup <- rnorm(1, pActBeta$nup, pActBeta$nup / 10)

  
  # Observer detections but ground = 3 is fixed
  # pObsr <- rbeta(2)
  
  list(
    #    ColZ = rep(1, length = nCapHistAug),
    ColZ = ColZ,
    ColPsiNu = ColPsiNu,
    ColPsiNup = ColPsiNup,
    lnNpCYFS = lnNpCYFS,
    pNest2Col = pNest2Col,
    pActNu = pActNu,
    pActNup = pActNup
  )
}

```
## Monitored Parameters

```{r ParmMonitor}
Parm <- c(
  "LstColTot",
  "LstActColTot",
  "LstNestTot",
  "LstActTot",
  "NewColTot",
  "NewActColTot",
  "NewNestTot",
  "NewActTot",
  "NpC",
  "pAct",
  "pObsr",
  "pNest2Col",
  "dic"
)
cParm <- c(
  #   sub("new","n",sub("ME","N",ColObs$FWSColonyID)),
  #  list occupied colonies
  paste("LCT", cYrStr, sep = ""),
  #  list active colonies
  paste("LAC", cYrStr, sep = ""),
  #  list nests
  paste("LNT", cYrStr, sep = ""),
  #  list active nests
  paste("LAT", cYrStr, sep = ""),
  #  new occupied colonies
  paste("NCT", cYrStr, sep = ""),
  #  new active colonies
  paste("NAC", cYrStr, sep = ""),
  #  new nests
  paste("NNT", cYrStr, sep = ""),
  #  new active nests
  paste("NAT", cYrStr, sep = ""),
  # Nests per Colony
  paste("NpC", sub(
    "\\.Area\\.", "a", sub("\\.List\\.", "l", cYFS)
  ), sep = ""),
  # Proportion active nests per colony
  paste("pA", cYFS, sep = ""),
  # Observer detection rates
  paste("p", cSeat, sep = ""),
  # Extra difficulty to detect colonies over nests in colonies
  "pNest2Col",
  # Model deviance (could not monitor DIC)
  "Dev"
)
nParm <- length(cParm)

```

## Simulation and Initialization Parameters

```{r SimInitParms}
nChain <- 4
nSim <- 50000    # Number of simulations desired
setnsims(nSim)
getnsims()
nThin <- 1
pctBurn <- 50
nBurn <- floor(nThin * nSim * pctBurn / (100 - pctBurn))
DebugMe <- FALSE

# set.seed(Save.Seed)
Inits <- sapply(1:nChain, InitFcn, simplify = FALSE)

# JAGS model
BUGSMdl <-
  paste(readLines(here::here(paste(
    "extdata/", cMdl, ".mdl", sep =
      ""
  ))), collapse = "\n")

```

## Save JAGS Model Setup

```{r SaveSetUp}
 # Run JAGS
unlink("runjagsfiles")
save(
  cMdl,
  nChain,
  nSim,
  nThin,
  pctBurn,
  nBurn,
  DebugMe,
  Data,
  Inits,
  InitFcn,
  Parm,
  cParm,
  nParm,
  BUGSMdl,
  file = here::here(paste("TmpData/", cMdl, ".RData", sep = ""))
)

```

## Run JAGS Bayesian Estimation

```{r RunJAGS}
if(lEst) {
  if (exists("MCMC"))
    rm(MCMC)
  runjags.options(force.summary = TRUE)
  runjags.getOption("force.summary")
  MCMC <- run.jags(
    model = BUGSMdl,
    monitor = c(Parm, "deviance", "pd"),
    data = Data,
    n.chains = nChain,
    inits = Inits,
    jags = findjags(look_in = if (file.exists("M:/"))
      "C:/Workspace/JAGS"
      else
        NA),
    method = "interruptible",
    burnin = nBurn,
    sample = nSim * nThin,
    thin = nThin,
    modules = "dic",
    plots = FALSE,
    keep.jags.files = TRUE,
    tempdir = TRUE
  )
} else {
  load(file = here::here(paste("TmpData/", cMdl, ".PS.RData", sep = "")))
}

# MCMC<-extend.jags(MCMC,sample=50000)
plot(MCMC, plot.type = "trace", vars = "NewActColTot")

# iObs<-159;Data$act[iObs];iCol<-Obs2Col[iObs];sapply(1:4,function(i)Inits[[i]]$Act[iCol])
# iObsr<-Obs2Obsr[iObs];sapply(1:4,function(i)Inits[[i]]$lgtObsr[iCol])

```

## Combine Chain Simulations

```{r CombineChains}

#  Didn't summarize
 if (FALSE) {
   tMCMC <-
     combine.mcmc(lapply(1:nChain, function(iChain,
                                            JagsDir = "",
                                            Start = 1) {
       read.coda(
         paste("runjagsfiles", JagsDir, "/CODAchain", iChain, ".txt", sep = ""),
         paste("runjagsfiles", JagsDir, "/CODAindex.txt", sep = ""),
         start = Start
       )
     }, JagsDir = "", Start = 1))
   
   MCMC$mcmc <- tMCMC
   tmp <- summary(tMCMC, na.rm = TRUE)
   MCMC$summary$statistics <- tmp$statistics
   MCMC$HPD <- tmp$quantiles
 }
 
 PostStat <- data.frame(MCMC$summary$statistics[, 1:2],
                        MCMC$HPD[, c(2, 1, 3)])
 colnames(PostStat)[3:5] <- c("median", "lower95", "upper95")
 # cPS<-rownames(PostStat);cPS;cParm
 rownames(PostStat) <- cParm
 
```

## Print JAGS Estimates

```{r PrintJAGS}
sink(here::here(sub("xlsx", "txt", File)), append = FALSE)
cat("Posteriors\n")
cat("List and List: Colony Total and Active and Nest Total and Active by Stratum\n")
print(PostStat[grepl("[LN][CAN][TC]", cParm), ], digits = 3)
cat("Nest per Colony\n")
print(PostStat[grepl("NpC", cParm), ], digits = 4)
cat("Proportion Active\n")
print(PostStat[grepl("pA", cParm), ], digits = 2)
cat("Detection Mean and SD\n")
print(PostStat[73:76, ], digits = 3)
cat("Deviance\n")
print(PostStat[nParm, ], digits = 3)
sink()

```

## Save JAGS Summaries
If already estimated these summaries were loaded above.

```{r JAGSSave}
if(lEst) {
  save(Data,
       nChain,
       nSim,
       nThin,
       pctBurn,
       nBurn,
       MCMC,
       PostStat,
       file = here::here(paste("TmpData/", cMdl, ".PS.RData", sep = "")))
}

```

## Simulate the Estimates

```{r SimEsts}
 # load(here::here(paste("TmpData/",cMdl,".PS.RData",sep="")))
 # Extract the 
# tmp4<-tMCMC
 nSim<-dim(MCMC$mcmc[[1]])[1]
 tmp<-MCMC$mcmc
 tmp2<-unlist(c(tmp[[1]],tmp[[2]],tmp[[3]],tmp[[4]]))

 tmp3<-array(tmp2,c(nSim,nParm,nChain))
 
 cPS<-dimnames(tmp[[1]])[[2]]
 
 tmp4<-aperm(tmp3,c(1,3,2))
 Dim4 <- dim(tmp4) 
 
 tmp5<-tmp4[(Dim4[1]/5 + 1):nSim,,]
 nSim<-dim(tmp5)[1]
 tmp4<-tmp5
 dim(tmp4)<-c(nSim*nChain,nParm)
 setnsims(nSim)

# str(tmp4)
# These are just for the sample in the list frame
 for(iParm in Parm){
   Idx<-grep(iParm,cPS)
   assign(iParm,rvsims(tmp4[,Idx]))
 }

```

## Make Output Tables

```{r MakeTables}
YrStrNames <- expand_grid(Year = cYear, Stratum = cStr)

TblLoc <- read.table(
  textConnection(
    "Table,Row,Col,Sheet,Title
PostStat,3,1,MdlParm,'Model Parmeters'
LstColSmry,4,3,Estimates,'List Colonies'
LstActColSmry,15,3,Estimates,'Active List Colonies'
LstNestSmry,26,3,Estimates,'List Nest per Colony'
LstActSmry,37,3,Estimates,'Active per Colony'
NewColSmry,4,11,Estimates,'New Colonies'
NewActColSmry,15,11,Estimates,'New Active Colonies'
NewNestSmry,26,11,Estimates,'New Nests'
NewActSmry,37,11,Estimates,'New Active Nests'
DFColSmry,4,19,Estimates,'Dual-Frame Colonies'
DFActColSmry,15,19,Estimates,'Dual-Frame Colonies'
DFNestSmry,26,19,Estimates,'Dual-Frame Colonies'
DFActSmry,37,19,Estimates,'Dual-Frame Active Colonies'
DFMean,4,27,Estimates,'Dual-Frame Means'
DFSD,15,27,Estimates,'Dual-Frame SDs'
CVSmry,26,27,Estimates,'Coefficients of Variation'
PctLstCovSmry,37,27,Estimates,'Percent List Coverage'
PctObsrDetSmry,3,3,'Obsr Det','Percent Observer Detection'
"),
sep = ",",
header = TRUE,
stringsAsFactors = FALSE
)

# Dual-Frame Estimates
# Colonies
DFColTot <- LstColTot + NewColTot
DFActColTot <- LstActColTot + NewActColTot
DFNestTot <- LstNestTot + NewNestTot
DFActTot <- LstActTot + NewActTot

# List coverage
tPctLstCovTot <- 100 * LstColTot / DFColTot
Tot1 <- 100 * sum(LstColTot[1:nStr]) / sum(DFColTot[1:nStr])
Tot2 <- 100 * sum(LstColTot[nStr + 1:nStr]) / sum(DFColTot[nStr + 1:nStr])
Sim <- c(tPctLstCovTot[1:nStr], Tot1, tPctLstCovTot[nStr + 1:nStr], Tot2)
Smry <- RVSmry(Series = Sim, probs = Probs)
PctLstCovSmry <- bind_cols(YrStrNames, Smry)
rm(tPctLstCovTot, Tot1, Tot2, Sim, Smry)

for (iTbl in TblLoc[c(2:9, 10:13), "Table"]) {
  # iTbl<-TblLoc[2,"Table"]
  iTot <- sub("Smry", "Tot", iTbl)
  assign(iTbl, eval(parse(text = paste(
    "MkSmry(", iTot, ")"
  ))))
  #   assign(iTbl,eval(parse(text=paste("RVSmry(Series=",iTot,",probs=Probs)"))))
}

# Estimates summary in terms of active nests
DFMean <- bind_cols(
  YrStrNames,
  List = LstActSmry$Mean,
  New = NewActSmry$Mean,
  DF = DFActSmry$Mean,
)

# SD's
DFSD <- bind_cols(YrStrNames,
                  List = LstActSmry$SD,
                  New = NewActSmry$SD,
                  DF = DFActSmry$SD)
# Coefficient of Variation
tLstCV <- LstActSmry %>%
  mutate(PctCV = 100 * SD / Mean)

tNewCV <- NewActSmry %>%
  mutate(PctCV = 100 * SD / Mean)

tDFCV <- DFActSmry %>%
  mutate(PctCV = 100 * SD / Mean)

CVSmry <- bind_cols(YrStrNames, tLstCV$PctCV, tNewCV$PctCV, tDFCV$PctCV)
colnames(CVSmry) <- c("Year", "Stratum", "List", "New", "DF")

# Percent Observer Detection
# Only have
PctObsrDetSmry <- bind_cols(Seat = cSeat, RVSmry(Series = 100 * pObsr, probs = Probs))

```

## Write the Tables

```{r WriteTables}
# Open workbook and get sheets
SmryFile <- here::here(stringr::str_replace(File, "xlsx", "Smry.xlsx"))
if (file.exists(SmryFile)) {
  WorkBook <- loadWorkbook(file = SmryFile)
} else {
  WorkBook <- createWorkbook(type = "xlsx")
  for (iSheet in c("MdlParm", "Estimates", "Obsr Det")) {
    createSheet(WorkBook, sheetName = iSheet)
  }
}
Sheet <- getSheets(WorkBook)

# Try making a rows and columns of the table that I fill
Rows <- createRow(sheet = Sheet[["Estimates"]], rowIndex = 1:45)
Cell <- createCell(Rows, colIndex = 1:33)

for (iTbl in 1:nrow(TblLoc)) {
  # iTbl<-1
  addDataFrame(
    x = as.data.frame(eval(parse(text = TblLoc[iTbl, "Table"]))),
    sheet = Sheet[[TblLoc[iTbl, "Sheet"]]],
    startRow = TblLoc[iTbl, "Row"],
    startColumn = TblLoc[iTbl, "Col"],
    col.names = TRUE,
    row.names = iTbl == 1,
    showNA = FALSE
  )
  # Title over the table
  setCellValue(cell = Cell[[TblLoc[iTbl, "Row"] - 1, 
                            TblLoc[iTbl, "Col"]]], 
               value = as.character(TblLoc[iTbl, "Title"]))
}

```

## Save the Data

```{r SaveData}
saveWorkbook(wb = WorkBook, file = SmryFile)
rm(tmp, tmp2, tmp3, tmp4)
rm(MCMC)
save.image(here::here(paste("TmpData/", cMdl, ".Image.RData", sep = "")))
# load(paste("TmpData/",cMdl,".Image.RData",sep=""))

```

## Colony Detection by Size
Detection is low and 

```{r ColonyDetection}
# pColSeen %>%
#   ggplot(aes(Nest, Median)) +
#   geom_line() +
#   geom_ribbon(
#     aes(ymin = C0.05, ymax = C0.95),
#     fill = "light green",
#     color = NA,
#     alpha = 0.2
#   ) +
#   geom_rug(
#     data = SmpColObs,
#     aes(x = Nest, y = 0.1),
#     alpha = 1 / 2,
#     sides = "b",
#     position = "jitter"
#   )

