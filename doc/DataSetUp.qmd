---
title: "Combined 2015 and 2023 Data Setup"
author: "Mark C. Otto"
eval: true
date: "4 December 2024"
format: docx
editor: source
---

## Introduction

We combine the 2015 and 2023 survey files: The spatial files are: `MEBoundrySF`, `StrSF`, `StrPlotSF`, `ColonySF`

The data files are `GRTSLoc` `tblFlightInfo` `tblPlotDetails` `tblObservations` `tblStaff`, `RecObs`.

Reference files: `StrArea`

These are combined over years. The flight, plot, and observation files combine into `RecObs`. I don't add the `begplot` and `endplot` in `RecObs` because the information was not collected and I can do the analysis without that information.  To more easily keep track of the original data, I copy it into the `ori` directory and record the edits that translate it to the data used in the `data` directory.  Instead of saving all the data in an `.RSave` file, read statements will retrieve each from the `data` directory.

I use her tables and create the list, plot, and caphist files for information from them.

I follow Danielle D'Auria's convention of using `_PK` of a primary key variable and `_FK` for a foreign key variable.

```{r SetUp}
library(readr)
library(readxl)
library(sf)
library(dplyr)

library(stringr)
library(tidyr)
library(purrr)
library(ggplot2)
library(RSQLite)
source(here::here("R/RDB2Data.R"))
source(here::here("R/LastFirst.R"))

# Write the spatial data to  `gis`, the dataframes to  `GBHE/data` and the collections of 
# single variables to `data/MetaVars.R`.  Use `lWrite = FALSE` to debug and test.
lWrite <- FALSE

# FALSE, the data come from the 2015 and 2023 projects and are written to the `GBHE/ori` directory.
# TRUE, the data are just read from the `GBHE/ori` directory.  
lFromOri <- TRUE

```

## Setup the levels, level names, and size of each level

If `lFromOri` is `FALSE`, then do I get the variables from `data/MetaVars.R`?

```{r Indices}

# Survey years
CurrentYr <- 2023
cYear <- c(2015, CurrentYr)
nYear <- length(cYear)

# Survey frames
cFrame <- c("List", "Area")
nFrame <- length(cFrame)

# Survey strata.  List stratum can be different than area stratum
# but not in this survey, so do not worry about this complication
# by using LstStr, AreaStr, and Str.  Just use Str.
cStr <- c("SC", "Co", "ND")
nStr <- length(cStr)

# Make the year-stratum levels
cYrStr <- apply(expand_grid(Year = cYear, Str = cStr), 1, function(x)
  paste(x[1], x[2], sep = "."))
nYrStr <- length(cYrStr)

# Make the year-frame-stratum levels.
# Should call cYFS.
cYFS <- apply(expand_grid(Year = cYear, Frame = cFrame, Str = cStr), 1, function(x)
  paste(x[1], x[2], x[3], sep = "."))
nYFS <- length(cYFS)

if(lWrite) {
  dump(
    list = c(
      "CurrentYr",
      "cYear",
      "nYear",
      "cFrame",
      "nFrame" ,
      "cStr",
      "nStr",
      "cYrStr",
      "nYrStr",
      "cYFS" ,              ,
      "nYFS"
    ),
    file = here::here("data/MetaVars.R")
  )
}

```

## CRS Projections

The spatial projections or CRS codes do not seem to define the projections correctly, so save them: Alpers equal area, UTS, and WGS84 (World Geodetic System 1984).

```{r CRSProjections}
CRS.WGS84 <- st_crs("EPSG:4326")
tStrPlotSF <- st_read("~/Profesional/GBHE.2023/GIS/StrPlotSp.shp")
CRS.Alpers <- st_crs(tStrPlotSF)
tColonySp <- st_read("~/Profesional/GBHE.2023/GIS/2015/GBHE_ColonyPlotJoin.shp")
CRS.UTM19N <- st_crs(tColonySp)
if (lWrite) {
  save(CRS.WGS84, file = here::here("data/CRS.WGS84.RData"))
  save(CRS.Alpers, file = here::here("data/CRS.Alpers.RData"))
  save(CRS.UTM19N, file = here::here("data/CRS.UTM19N.RData"))
}

```

## Maine State Boundary Layer

The state boundary polygon, [Maine State Boundary Polygon Feature](https://maine.hub.arcgis.com/datasets/maine::maine-state-boundary-polygon-feature/explore), is `WGS 84`. This is just a reference layer, so leave the variables as is. Transform it to Alpers and save as a KML file.  We don't need to save this because we have a reference to pull it from and how to transform it.

```{r MEBoundary}
tMEBoundarySF <- st_read("~/Profesional/GBHE.2023/GIS/Maine_State_Boundary_Polygon_Feature.shp")
MEBoundarySF <- st_transform(x = tMEBoundarySF, crs = CRS.Alpers)
if (lWrite) {
  st_write(
    MEBoundarySF,
    dsn = here::here("gis/MEBoundarySF.kml"),
    delete_layer = TRUE
  )
}
rm(tMEBoundarySF)

```

## Stratum Layer

Stratum, `StrSF`. Don't worry about the complication of list and area strata that are not involved in this survey.

Maine is supposed to have 91,646kmÂ². Danielle may have removed some water area. Use the areas in `StrArea`.

```{r Stratum}
StrArea <- RDB2Data(Tbl = "StrArea",
                    RowNames = "DFStr",
                    RDB = "~/Profesional/GBHE.2023/extdata/2023/DFS2023.sq3") %>%
  select(Str_PK = DFStr, cStratum, KMSq)
fStr <- factor(StrArea$Str_PK, StrArea$Str_PK)
if (lWrite) {
  dump(
    list = c("StrArea", "fStr"),
    file = here::here("data/MetaVars.R") ,
    append = TRUE
  )
}

# Use the 2023 for both stratum layers.
if (lFromOri) {
  tStrSF <- st_read(here::here("ori/gis/StrSF.shp"))
} else {
  tStrSF <- st_read("~/Profesional/GBHE.2023/GIS/GBHE_Stratum.shp")
  st_write(tStrSF,
           dsn = here::here("ori/gis/StrSF.shp"),
           delete_layer = TRUE)
}

# `dplyr` joins remove the `sf` class.
tStrSF2 <- st_as_sf(
  inner_join(
    tibble::as_tibble(x = list(
      Str_FK = fStr, cStratum = StrArea$cStratum
    )),
    tStrSF %>%
      mutate(KMSq = AREA / 10 ^ 6, cStratum = NAME2_) %>%
      select(cStratum, KMSq),
    by = "cStratum"
  ) %>%
    arrange(Str_FK)
)

StrSF <- st_transform(x = tStrSF2, crs = CRS.Alpers)
if (lWrite) {
  st_write(StrSF,
           dsn = here::here("gis/StrSF.kml"),
           delete_layer = TRUE)
}
rm(tStrSF, tStrSF2)

```

## Colony List for both years

We should start with the colony list we had in 2015, add the new colonies found in the 2015 survey and any in the following eight years.

What is odd is ME.0712 was dropped from the list and we had new colonies at least found in the survey. If ME.0712 was in active since the last survey, then there is good reason to drop it.

The `AnnObs` table is a good way to create the list colonies for each survey, but we don't have a current set of those observations.

To add the 2015 new colonies, use the locations and match them to the `AllColonies` list. Ask Danielle.

Make the spatial layer out of the `.csv` files.

```{r Colony2015}
# These are all the colonies.  445 of them so select from the last list
# Where are the new colonies found in the last survey.
# Is in UTM 19N
if (lFromOri) {
  tColony2015 <- read_csv(here::here("ori/Colony2015.csv"), col_types = "c-ccddicciic")
} else {
  tColony2015 <- RDB2Data(Tbl = "Nest",
                          RowNames = "FWSNestID",
                          RDB = "~/Profesional/GBHE.2023/extdata/2015/DFS2015.sq3")
  readr::write_csv(tColony2015, here::here("ori/Colony2015.csv"), na = "")
}

tColony2015<-tColony2015%>%
  select(
    FWSColonyID_PK = FWSNestID,
    Str_FK = LstStr,
    PlotID_FK = PlotID,
    Lng,
    Lat,
    LastYr,
    Status,
    nNest,
    nActive,
    Comment
  )

# Save the original RC2XY, row-col to my 0-9A-Z code
if (lFromOri) {
  tRC2XY <- read_csv(here::here("ori/RC2XY.csv"), col_types = "ciiidd")
} else {
  tRC2XY <- read_csv("~/Profesional/GBHE.2015/ExtData/RC2XY.csv", col_types = "c-iiidd")
  readr::write_csv(tRC2XY, here::here("ori/RC2XY.csv"), na = "")
}

# Save RC2XY for reference.  
RC2XY <- tRC2XY %>%
  select(PlotID, Col, Row)
if(lWrite){
  readr::write_csv(RC2XY, here::here("data/RC2XY.csv"), na = "")
}

```
## 2023 Colony List

2023 is a spatial file but 2015 was a dataframe, but the `dplyr` joins remove the spatial class.

```{r Colony2023}
if (lFromOri) {
  tColony2023 <- st_read(here::here("ori/gis/Colony2023.shp"))
} else {
  tColony2023 <- st_read("~/Profesional/GBHE.2023/GIS/2023/ListFrameNewPlots.shp")
  # This only has 215 colonies.  Ask Danielle.
  # uColony2023 <- st_read("~/Profesional/GBHE.2023/GIS/2023/GBHE_ColonyPlotJoin.shp")
  st_write(
    tColony2023,
    dsn = here::here("ori/gis/Colony2023.shp"),
    delete_layer = TRUE
  )
}

# Format the colony names, use the stratum short names, and add the `PlotID`.
# Note that the join makes the file non-spatial.
tCol2023SF <- inner_join(
  tColony2023 %>%
    mutate(
      FWSColonyID_PK = sprintf("ME.%04d", COLONYNO),
      Str_FK = c(
        "South Central" = "SC",
        "Coastal" = "Co",
        "North and Downeast" = "ND"
      )[NAME2_],
      nNest = AvgMaxNest
    ),
  RC2XY %>%
    select(PlotID, Col, Row),
  by = c("Col", "Row")
) %>%
  select(FWSColonyID_PK, Str_FK, PlotID_FK = PlotID, nNest)

# Add the lat-longs
LatLongSF <- st_transform(x = tCol2023SF, crs = CRS.WGS84)
LatLong <- st_drop_geometry(LatLongSF %>%
                              mutate(Lng = unlist(map(
                                LatLongSF$geometry, 1
                              )), Lat = unlist(map(
                                LatLongSF$geometry, 2
                              ))) %>%
                              select(Lng, Lat))

# Add the long-lat to the nestlist
Col2023SF <- bind_cols(tCol2023SF, LatLong) %>%
  mutate(
    LastYr = as.integer(NA),
    Status = as.character(NA),
    nActive = as.integer(NA),
    Comment = as.character(NA)
  ) %>%
  select(FWSColonyID_PK,
         Str_FK,
         PlotID_FK,
         Lng,
         Lat,
         LastYr,
         Status,
         nNest,
         nActive,
         Comment)

# Don't use.  Make the spatial data from the dataframes?
# Has 302 observations like 2023.  
tColony2015SF <- left_join(
  tColony2023 %>%
    mutate(FWSColonyID_PK = sprintf("ME.%04d", COLONYNO)) %>%
    select(FWSColonyID_PK),
  tColony2015,
  by = "FWSColonyID_PK"
)

# For now, make an entry for each year.  We should get these from
# and annual observations file like `AnnObs`.
ColonySF <- st_as_sf(bind_rows(
  tColony2015SF %>%
    mutate(Year = 2015),
  Col2023SF %>%
    mutate(Year = 2023)
))  %>%
  select(
    FWSColonyID_PK,
    Year,
    Str_FK,
    PlotID_FK,
    Lng,
    Lat,
    LastYr,
    Status,
    nNest,
    nActive,
    Comment
  )

tColonySF <- st_transform(
  st_as_sf(Colony %>% mutate(tLng = Lng, tLat = Lat), 
                         coords = c("tLng", "tLat"), 
                         crs = CRS.WGS84),
  crs = CRS.UTM19N)
# I made AllColony and AllColonySF read only to protect them.


if (lWrite) {
  st_write(tColonySF,
           dsn = here::here("gis/ColonySF.kml"),
           delete_layer = TRUE)
}

rm(tRC2XY, tColony2015, tColony2023, tColony2015SF)

```
## Non-Spatial Colony List

```{r NonSpatialColonies}
Colony <-  st_drop_geometry(ColonySF) %>%
  select(
    Year,
    FWSColonyID = FWSColonyID_PK,
    Str = Str_FK,
    PlotID = PlotID_FK,
    Lng,
    Lat,
    nNest,
    nActive
  )
if (lWrite) {
  readr::write_csv(Colony, here::here("data/Colony.csv"), na = "")
}

```
## Stratum-Plot Layer

I intersected or spatially joined the stratum with the plot layers, so use `StrPlotSF`. Later create the lat-long using `st_centroid()`. Also copy over the `Plot` table that is non spatial but has number of colonies and km^2^. The row and col come from `RC2XY` made in the Bald Eagle national grid.

```{r StrPlot}
if (lFromOri) {
  tStrPlotSF <- st_read(here::here("ori/gis/StrPlotSF.shp"))
} else {
  tStrPlotSF <- st_read("~/Profesional/GBHE.2023/GIS/StrPlotSp.shp") %>%
    select(Str_FK = Str, PlotID_FK = PlotID, KMSq, Col, Row)
  st_write(tStrPlotSF,
           dsn = here::here("ori/gis/StrPlotSF.shp"),
           delete_layer = TRUE)
}

tLatLong <- st_transform(x = st_centroid(tStrPlotSF), crs = CRS.WGS84)
LatLong <- st_drop_geometry(tLatLong %>%
                              mutate(Lng = unlist(map(
                                tLatLong$geometry, 1
                              )), Lat = unlist(map(
                                tLatLong$geometry, 2
                              ))) %>%
                              select(Lng, Lat))

# Add the long-lat to the nestlist
StrPlotSF <- bind_cols(tStrPlotSF, LatLong) %>%
  select(Str_FK, PlotID_FK, KMSq, Lng, Lat, Col, Row)
if(lWrite) {
  st_write(StrPlotSF, here::here("GIS/StrPlotSF.kml"), delete_layer = TRUE)
}
rm(tStrPlotSF, tLatLong, LatLong)

```

## All Known Colonies

We need all colonies to incorporate the 2015 new nests into the 2023 list and some colonies not in the original list were observered.

```{r AllColonies}
# NestList is the colony list.  Need to remove all the colonies without
# locations.
if (lFromOri) {
  tColonies <- read_csv(here::here("ori/Colonies.csv"))
} else {
  tColonies <- read_csv(file = "~/Profesional/GBHE.2023/extdata/2023/COLONIES.csv")
  readr::write_csv(tColonies, here::here("ori/Colonies.csv"), na = "")
}

tColonySF <- tColonies %>%
  # read_csv(file = "~/Profesional/GBHE.2023/extdata/2023/COLONIES.csv", col_types = "ic--c---------cccc---dd---c-d------ii") %>%
  filter(!is.na(X_UTMNAD83)) %>%
  mutate(
    FWSColonyID = sprintf("ME.%04d", COLONYNO),
    Year = ifelse(Found2009, "2009", "<2009"),
    Comment = paste(
      SiteID,
      ColName,
      HabitatDesc,
      Directions,
      Comments,
      History,
      sep = ";"
    )
  ) %>%
  select(FWSColonyID, Nest = COLSIZE, Year, Comment, X_UTMNAD83, Y_UTMNAD83) %>%
  # 0919 was a duplicate.
  distinct() %>%
  st_as_sf(coords = c("X_UTMNAD83", "Y_UTMNAD83"),
           crs = CRS.UTM19N)

tLatLong <- st_transform(x = tColonySF, crs = CRS.WGS84)

LatLong <- st_drop_geometry(tLatLong %>%
                              mutate(Lng = unlist(map(
                                tLatLong$geometry, 1
                              )), Lat = unlist(map(
                                tLatLong$geometry, 2
                              ))) %>%
                              select(Lng, Lat))

# Add the long-lat to the nestlist
tColonySF2 <- bind_cols(tColonySF, LatLong)

AllColonySF <- st_intersection(
  StrPlotSF %>%
    select(Str = Str_FK, PlotID = PlotID_FK),
  st_transform(x = tColonySF2, crs = st_crs(StrPlotSF))
) %>%
  select(FWSColonyID, Year, Str, PlotID, Nest, Lng, Lat, Comment)

# Colony has more colonies than AllColonies
PickOne <- function(x){
  idx <- !is.na(x)
  return(x[idx][1])
}

tAllCol <- bind_rows(
  st_transform(AllColonySF, crs = CRS.UTM19N),
  #  st_drop_geometry(ColonySF) %>%
  st_transform(ColonySF, crs = CRS.UTM19N) %>%
    mutate(
      FWSColonyID = FWSColonyID_PK,
      Str = Str_FK,
      PlotID = PlotID_FK,
    ) %>%
    group_by(FWSColonyID, Year, Str, PlotID) %>%
    summarize(
      Year = min(Year, 2009),
      Nest = max(nNest, 0, na.rm = TRUE),
      Lng = mean(Lng, na.rm = TRUE),
      Lat = mean(Lat, na.rm = TRUE),
      Comment = PickOne(Comment),
      .groups = "drop"
    ) %>%
    mutate(Year = as.character(Year), ) %>%
    dplyr::select(FWSColonyID, Year, Str, PlotID, Nest, Lng, Lat, Comment)
) %>%
  distinct() %>%
  group_by(FWSColonyID, Year, Str, PlotID) %>%
  summarize(
    Year = min(Year, 2009),
    Nest = as.integer(max(Nest, 0, na.rm = TRUE)),
    # Del = "",
    Lng = mean(Lng, na.rm = TRUE),
    Lat = mean(Lat, na.rm = TRUE),
    Comment = PickOne(Comment),
    .groups = "drop"
  ) %>%
  arrange(FWSColonyID, desc(Nest)) %>%
  filter(!(duplicated(FWSColonyID)
           #&(is.na(Comment)|grepl("count", Comment))
           ))
AllColonySF <- tAllCol        
AllColony <- st_drop_geometry(AllColonySF)

# Here is another attempt to put together AllColony
ctmp <- left_join(Colony,
                  NewColonies %>%
                    mutate(LastYr = Year),
                  by = c("Year", "FWSColonyID")) %>%
  group_by(FWSColonyID, Str, PlotID) %>%
  summarize(Year = max(Year, na.rm = TRUE),
            LastYr = max(LastYr, na.rm = TRUE),
            Nest = max(nNest, na.rm = TRUE),
            Lng = mean(Lng, na.rm = TRUE), 
            Lat = mean(Lat, na.rm = TRUE), 
            .groups = "drop") %>%
  mutate(Year = ifelse(is.finite(LastYr), LastYr, Year)) %>%
  select(FWSColonyID, Year, Str, PlotID, Nest, Lng, Lat)

tAllColony <- full_join(ctmp,
                        AllColony,
                        by = c("FWSColonyID", "Str", "PlotID")) %>%
  mutate(
    Year = ifelse(is.na(Year.x), Year.y, Year.x),
    Nest = pmax(Nest.x, Nest.y, na.rm = TRUE), 
    Lng = pmax(Lng.x, Lng.y, na.rm = TRUE), 
    Lat = pmax(Lat.x, Lat.y, na.rm = TRUE)
  ) %>%
  select(FWSColonyID, Year, Str, PlotID, Nest, Lng, Lat, Comment)

tAllColonySF <- st_transform(
  st_as_sf(tAllColony %>% mutate(tLng = Lng, tLat = Lat), 
                         coords = c("tLng", "tLat"), 
                         crs = CRS.WGS84),
  crs = CRS.UTM19N)
# I made AllColony and AllColonySF read only to protect them.

if (lWrite) {
  write_csv(tAllColony, here::here("data/AllColony.csv"), na = "")
  st_write(tAllColonySF,
           here::here("gis/AllColonySF.kml"),
           delete_layer = TRUE)
}
rm(tColonies, tColonySF, tColonySF2, tLatLong, LatLong)

```

## List Plot List

Doesn't this depend on the year the sample was taken as to what is put in the list? For now we use all colonies.

```{r List}
List <- st_drop_geometry(ColonySF) %>%
  select(Str = Str_FK,
         PlotID = PlotID_FK,
         nNest,
         # Should standardize: nActive or nAct
         nAct = nActive) %>%
  group_by(Str, PlotID) %>%
  summarize(
    nCol = n(),
    nNest = sum(nNest, na.rm = TRUE),
    nAct = sum(nAct, na.rm = TRUE),
    .groups = "drop"
  )
if (lWrite) {
  readr::write_csv(List, here::here("data/List.csv"), na = "")
}

```

## Identify the colonies used for known colonies.

```{r IntoBaldEagleForm}
#| eval: false
tColUsed <- read_csv("~/Profesional/GBHE.2023/extdata/2023/GBHE_ColonyPlotJoin.csv",
                     col_types = "---idd------ii----------------c-") %>%
  mutate(FWSColonyID = sprintf("ME.%04d", COLONYNO),
         DatEntered = "2022-01-01") %>%
  select(FWSColonyID, DatEntered)

```

## Plot Non-Spatial

Add the nests too.

```{r Plot}
tPlot <- st_drop_geometry(StrPlotSF) %>%
  select(Str = Str_FK, PlotID = PlotID_FK, KMSq, Lng, Lat)

Plot <- left_join(tPlot, List, by = c("Str", "PlotID")) %>%
  mutate(
    nCol = ifelse(is.na(nCol), 0, nCol),
    nNest = ifelse(is.na(nNest), 0, nNest),
    nAct = ifelse(is.na(nAct), 0, nAct)
  ) %>%
  select(Str, PlotID, Lng, Lat, KMSq, nCol, nNest, nAct)
if (lWrite) {
  write_csv(Plot, here::here("data/Plot.csv"), na = "")
}
rm(tPlot)

```

## GRTS Sample

Combine the current year GRTS sample file with the past years. Add the year onto the tables.  Archive `GRTSLoc` that has all the information used for the sample design.  Make `GRTSSmp` that identifies the samples flown and keep that for the estimation.

L79 was sampled, so correct `EvalStatus`.

```{r GetFromDB}
if (lFromOri) {
  GRTSLoc2015 <- read_csv(here::here("ori/GRTSLoc2015.csv"), col_types = "ccddidcccccccc")
  GRTSLoc2023 <- read_csv(here::here("ori/GRTSLoc2023.csv"), col_types = "ccddidcccccccc")
} else {
  GRTSLoc2015 <- RDB2Data(
    Tbl = "GRTSLoc",
    RowNames = "siteID",
    RDB = "~/Profesional/GBHE.2023/extdata/2015/DFS2015.sq3",
    envir = NULL
  )
  readr::write_csv(GRTSLoc2015, here::here("ori/GRTSLoc2015.csv"), na = "")
  
  GRTSLoc2023 <- RDB2Data(
    Tbl = "GRTSLoc",
    RowNames = "siteID",
    RDB = "~/Profesional/GBHE.2023/extdata/2023/DFS2023.sq3",
    envir = NULL
  )
  readr::write_csv(GRTSLoc2023, here::here("ori/GRTSLoc2023.csv"), na = "")
}

tGRTSLoc2 <- bind_rows(GRTSLoc2015 %>%
                         mutate(Year = 2015),
                       GRTSLoc2023 %>%
                         mutate(Year = CurrentYr)) %>%
  mutate(
    Str = stratum,
    siteID = Plot,
    EvalStatus = ifelse(is.na(EvalStatus), FALSE, EvalStatus == "Evaluated"),
    EvalStatus = ifelse(siteID == "L79", TRUE, EvalStatus)
  )

GRTSLoc <- inner_join(tGRTSLoc2,
                      Plot  %>%
                        select(Str, PlotID, KMSq, nAct),
                      by = c("Str", "PlotID")) %>%
  select(
    Year,
    siteID,
    Str,
    PlotID,
    SmpType,
    xcoord,
    ycoord,
    mdcaty,
    wgt,
    KMSq,
    nAct,
    panel,
    EvalStatus,
    EvalReason,
    Comment
  )
if (lWrite) {
  readr::write_csv(GRTSLoc, here::here("data/GRTSLoc.csv"), na = "")
}
 # GRTSLoc <-   readr::read_csv(here::here("data/GRTSLoc.csv"), 
 #                              col_types = "iccccddiddiclcc")

rm(GRTSLoc2015, GRTSLoc2023, tGRTSLoc2)

```
## `GRTSSmp` for the Estimation

```{r GRTSSmp}
GRTSSmp <- GRTSLoc %>%
  filter(EvalStatus) %>%
  select(Year, siteID, Str, PlotID, SmpType, KMSq, nAct)

if (lWrite) {
  readr::write_csv(GRTSSmp, here::here("data/GRTSSmp.csv"), na = "")
}

```

The colony observations, `RecObs` are created from `tblFlightInfo`, `tblObservations`, `tblPlotDetails`, and `tblStaff`.

First combine the flight and plot files. Problems with commas in the weather notes, `WxNotes` in the 2023 table. Put quotes around the field.

```{r FlightPlot}
if (lFromOri) {
  tblFlightInfo2015 <- read_csv(here::here("ori/tblFlightInfo2015.csv"), col_types = "iiiiccccccc")
  
  tblFlightInfo2023 <- read_csv(here::here("ori/tblFlightInfo2023.csv"), col_types = "iiiiccccccc")
} else {
  tblFlightInfo2015 <- readr::read_csv(
    "~/Profesional/GBHE.2015/ExtData/GBHEDualFrame2/tblFlightInfo.csv",
    col_types = "iiiiccccccc"
  )
  readr::write_csv(tblFlightInfo2015,
                   here::here("ori/tblFlightInfo2015.csv"),
                   na = "")
  
  tblFlightInfo2023 <- readr::read_csv(
    "~/Profesional/GBHE.2023/extdata/2023/tblFlightInfo.csv",
    col_types = "iiiiccccccc"
  )
  readr::write_csv(tblFlightInfo2023,
                   here::here("ori/tblFlightInfo2023.csv"),
                   na = "")
}

tblFlightInfo <- bind_rows(tblFlightInfo2015, tblFlightInfo2023) %>%
  mutate(
    Date = sprintf("%04d-%02d-%02d", DateYear, DateMonth, DateDay),
    Start = as.POSIXct(Start, format = "%H:%M:%S"),
    End = as.POSIXct(End, format = "%H:%M:%S"),
    Comment = paste(ifelse(is.na(WxNotes), "", WxNotes), ifelse(is.na(Comments), "", Comments), sep = "; ")
  ) %>%
  select(
    Flight_PK,
    Year = DateYear,
    Date,
    Start,
    End,
    Pilot,
    Front = FObs,
    Rear = RObs,
    Comment
  )
if (lWrite) {
  readr::write_csv(tblFlightInfo, here::here("data/tblFlightInfo.csv"), na = "")
}
rm(tblFlightInfo2015, tblFlightInfo2023)

```

## Add the obserervers to the meta-variable dump

```{r ObsrVars}
# For observer detection
cSeat <- c("Front", "Rear", "Dirt")

# Set up the observers for observer detection. Put ground last and set detection to one.
cObsr <- unique(as.character(c(
  tblFlightInfo$Front, tblFlightInfo$Front
)))
cObsr <- cObsr[order(LastFirst(cObsr))]
cObsr <- c(cObsr[cObsr != "Gnd"], "Gnd")
nObsr <- length(cObsr)

if (lWrite) {
  dump(
    list = c("cSeat", "cObsr", "nObsr"),
    file = here::here("data/MetaVars.R") ,
    append = TRUE
  )
}

```

## Merge the plot tables

Combine with `GRTSLoc` to add `Str` and `PlotID`. The `OOS` will not have stratum or plot ID.

```{r PlotDetails}
if (lFromOri) {
  tblPlotDetails2015 <- read_csv(here::here("ori/tblPlotDetails2015.csv"), col_types = "iclccccci")
  
  tblPlotDetails2023 <- read_csv(here::here("ori/tblPlotDetails2023.csv"), col_types = "iclccccci")
} else {
  tblPlotDetails2015 <- readr::read_csv(
    "~/Profesional/GBHE.2015/ExtData/GBHEDualFrame2/tblPlotDetails.csv",
    col_types = "iclccccci"
  )
  readr::write_csv(tblPlotDetails2015,
                   here::here("ori/tblPlotDetails2015.csv"),
                   na = "")
  
  tblPlotDetails2023 <- read_csv("~/Profesional/GBHE.2023/extdata/2023/tblPlotDetails.csv",
                                 col_types = "iiclccccc")
  readr::write_csv(tblPlotDetails2023,
                   here::here("ori/tblPlotDetails2023.csv"),
                   na = "")
}

ttblPlotDetails <- bind_rows(
  tblPlotDetails2015 %>%
    mutate(Year = 2015),
  tblPlotDetails2023 %>%
    mutate(Year = CurrentYr)
) %>%
  mutate(
    BegArea = as.POSIXct(BegArea, format = "%H:%M:%S"),
    EndArea = as.POSIXct(EndArea, format = "%H:%M:%S"),
    BegList = as.POSIXct(BegList, format = "%H:%M:%S"),
    EndList = as.POSIXct(EndList, format = "%H:%M:%S"),
    Comment = ifelse(`Combined?`, paste("Combined.", ifelse(
      is.na(Comments), "", Comments
    )), Comments)
  )

tblPlotDetails <-
  left_join(
    ttblPlotDetails,
    GRTSLoc %>%
      select(Year, SiteID = siteID, Str, PlotID),
    by = c("Year", "SiteID")
  ) %>%
  select(
    PlotDetails_PK,
    Year,
    Str,
    Flight_FK,
    SiteID,
    PlotID,
    BegArea,
    EndArea,
    BegList,
    EndList,
    Comment
  )
if (lWrite) {
  readr::write_csv(tblPlotDetails, here::here("data/tblPlotDetails.csv"), na = "")
}
rm(tblPlotDetails2015, tblPlotDetails2023, ttblPlotDetails)

```

## 2015 Observations
I am assuming the coordinates are in UTM 19N. Convert them to lat-longs for the few that have coordinates. These are important since the GBHE ones are the new colonies and we have to add them to the 2023 colony list.

Save `LatLong` to correct `RecObs2015` too.

Is 2015 a different format than 2023?

```{r 2015Observations}
if (lFromOri) {
  ttblObservations2015 <- read_csv(here::here("ori/tblObservations2015.csv"), 
                                   col_types = "iclicciiiicccicii")
} else {
  ttblObservations2015 <- readr::read_csv(
    "~/Profesional/GBHE.2015/ExtData/GBHEDualFrame2/tblObservations.csv",
    col_types = "iclicciiiicccicii"
  )
  readr::write_csv(ttblObservations2015,
                   here::here("ori/tblObservations2015.csv"),
                   na = "")
}

# Putting the primary and secondary keys first
utblObservations2015 <- ttblObservations2015 %>%
  mutate(Year = 2015) %>%
  select(
    Obs_PK,
    PlotDetails_FK,
    WaypointID,
    `NewColony?`,
    WBC_ID,
    Strata,
    Time,
    CaptHist,
    FObsTot,
    FObsAct,
    RObsTot,
    RObsAct,
    Species,
    Habitat,
    Comments,
    Latitude,
    Longitude,
    Year
  )

# For only those observations with locations.
Loc2015SF <- utblObservations2015 %>%
  filter(!is.na(Latitude)) %>%
  mutate(xUTM = Longitude, yUTM = Latitude) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = CRS.UTM19N) %>%
  st_transform(crs = CRS.WGS84)

LatLong <- st_drop_geometry(Loc2015SF %>%
                              mutate(Lng = unlist(map(
                                Loc2015SF$geometry, 1
                              )), Lat = unlist(map(
                                Loc2015SF$geometry, 2
                              ))) %>%
                              select(Obs_PK, xUTM, yUTM, Lat, Lng))

tblObservations2015 <- left_join(utblObservations2015, LatLong, by = "Obs_PK") %>%
  select(
    Obs_PK,
    PlotDetails_FK,
    WaypointID,
    `NewColony?`,
    WBC_ID,
    Strata,
    Time,
    CaptHist,
    FObsTot,
    FObsAct,
    RObsTot,
    RObsAct,
    Species,
    Habitat,
    Comments,
    Latitude = Lat,
    Longitude = Lng,
    Year
  )

rm(ttblObservations2015, utblObservations2015, Loc2015SF, LatLong)

```

## 2023 Observations

Make edits that I would have made on `RecObs`.

```{r 2023Observations}
if (lFromOri) {
  tblObservations2023 <- read_csv(here::here("ori/tblObservations2023.csv"), col_types = "iicliccciiiicccdd")
} else {
  tblObservations2023 <- read_csv("~/Profesional/GBHE.2023/extdata/2023/tblObservations.csv",
                                  col_types = "iicliccciiiicccdd") %>%
    # Remove the duplicate ObsPK = 151
    distinct()
  readr::write_csv(tblObservations2023,
                   here::here("ori/tblObservations2023.csv"),
                   na = "")
}

```

## Combine Observations

Need to edit the 2023 observations like Danielle and I did with `RecObs`. and add all the locations for the known colonies. Also, many of the nests are not on the colony list we used for 2023. 1. They don't have the 2015 new nests and 2. observed ones that are not on the list we used but are on the all colonies list.

To get this done, combine `RecObs`.

```{r Combine2015-2023}
tblObservations <- bind_rows(tblObservations2015,
                             tblObservations2023 %>%
                               mutate(Year = CurrentYr))  %>%
  mutate(
    FWSColonyID = ifelse(is.na(WBC_ID), NA, sprintf("ME.%04d", WBC_ID)),
    Str = Strata,
    AOU = ifelse(is.na(Species) &
                   pmax(FObsAct, RObsAct, na.rm = TRUE) == 0, "GBHE", Species),
    CapHist = tolower(CaptHist),
  ) %>%
  select(
    Year,
    Obs_PK,
    PlotDetails_FK,
    Lng = Longitude,
    Lat = Latitude,
    AOU,
    CapHist,
    Location = Habitat,
    FWSColonyID,
    fNest = FObsTot,
    rNest = RObsTot,
    fAct = FObsAct,
    rAct = RObsAct,
    Comment = Comments
  ) %>%
  arrange(Obs_PK)

if (lWrite) {
  readr::write_csv(tblObservations,
                   here::here("data/tblObservations.csv"),
                   na = "")
}

rm(tblObservations2015, tblObservations2023)

```
## List the new colonies, since in `tblObservations` and `RecObs` the we use the new colony id instead of a code with `new.`.

```{r NewColonies}
NewColonies <- readr::read_csv(here::here("data/NewColonies.csv"), col_types = "ic")

```
## Combine `RecObs` from `tbl*` data files

```{r CombineRecObs}
tRecObs <- inner_join(tblFlightInfo,
                      tblPlotDetails,
                      by = c(Flight_PK = "Flight_FK", "Year")) %>%
  mutate(Comment = paste(Comment.x, Comment.y, sep = ";")) %>%
  select(
    Flight_PK,
    PlotDetails_PK,
    Year,
    Date,
    BegFlight = Start,
    EndFlight = End,
    Pilot ,
    Front,
    Rear,
    Str ,
    siteID = SiteID,
    PlotID,
    BegArea,
    EndArea,
    BegList,
    EndList,
    Comment
  )

# I should do a spatial join for every colony observed in case there
# are any strata that split sample plots.
tRecObs2 <- left_join(
  tRecObs %>%
    select(
      Flight_PK,
      PlotDetails_PK,
      Year,
      siteID,
      PlotID,
      Date,
      Pilot,
      Front,
      Rear,
      Comment
    ),
  GRTSLoc %>%
    select(Year, siteID, PlotID, Str),
  by = c("Year", "siteID", "PlotID")
) 

# Merge the flight, plot, and observation tables to make `RecObs`.
# Keep all the flight, plot, and observation keys for reference.
# All the sampled colonies have a stratum and plot.
# Don't match the bald eagle RecObs.  Obs_PK is equivalent to OBJECTID.
tRecObs3 <- inner_join(tRecObs2,
                       tblObservations,
                       by = c(PlotDetails_PK = "PlotDetails_FK", "Year")) %>%
  mutate(
    FWSColonyID = sub("new", "ME", FWSColonyID),
    Comment = paste(Comment.x, Comment.y, sep = ";")
  ) %>%
  select(
    Obs_PK,
    Year,
    Str,
    siteID,
    PlotID,
    DatTim = Date,
    Pilot,
    Front,
    Rear,
    Lng,
    Lat,
    AOU,
    CapHist,
    Location,
    FWSColonyID,
    fNest,
    rNest,
    fAct,
    rAct,
    Comment,
    Flight_PK,
    PlotDetails_PK
  ) 

# tRecObs4 still has the geometry
tRecObs4 <- left_join(
  tRecObs3,
  AllColonySF %>%
    select(
      FWSColonyID,
      tStr = Str,
      tPlotID = PlotID,
      Lng,
      Lat
    ),
  by = "FWSColonyID"
)  %>%
  mutate(
    Str = ifelse(is.na(Str), tStr, Str),
    PlotID = ifelse(is.na(PlotID), tPlotID, PlotID),
    Lng = ifelse(is.na(Lng.x), Lng.y, Lng.x),
    Lat = ifelse(is.na(Lat.x), Lat.y, Lat.x)
  )  %>%
  select(
    Obs_PK,
    Year,
    Str,
    siteID,
    PlotID,
    DatTim,
    Pilot,
    Front,
    Rear,
    Lng,
    Lat,
    AOU,
    CapHist,
    Location,
    FWSColonyID,
    fNest,
    rNest,
    fAct,
    rAct,
    Comment,
    Flight_PK,
    PlotDetails_PK
  ) %>%
  arrange(Obs_PK)

RecObs <- st_drop_geometry(tRecObs4) %>%
  group_by(
    Obs_PK,
    Year,
    Str,
    siteID,
    PlotID,
    DatTim,
    Pilot,
    Front,
    Rear,
    AOU,
    CapHist,
    Location,
    FWSColonyID,
    fNest,
    rNest,
    fAct,
    rAct,
    Comment,
    Flight_PK,
    PlotDetails_PK
  ) %>%
  summarize(
    Lng = mean(Lng, na.rm = TRUE),
    Lat = mean(Lat, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    AOU = ifelse(is.na(AOU)&!is.na(FWSColonyID), "GBHE", AOU),
    fNest = ifelse(is.na(fNest), 0, fNest),
    rNest = ifelse(is.na(rNest), 0, rNest),
    fAct = ifelse(is.na(fAct), 0, fAct),
    rAct = ifelse(is.na(rAct), 0, rAct),
    Comment = str_replace_all(Comment, ";NA", ";")
  ) %>%
  select(
    Obs_PK,
    Year,
    Str,
    siteID,
    PlotID,
    DatTim,
    Pilot,
    Front,
    Rear,
    Lng,
    Lat,
    AOU,
    CapHist,
    Location,
    FWSColonyID,
    fNest,
    rNest,
    fAct,
    rAct,
    Comment,
    Flight_PK,
    PlotDetails_PK
  )
# Keep the colony IDs on the non-GBHE but make the counts zero.
# at one time they were GBHE colonies.
if (lWrite) {
  readr::write_csv(RecObs, here::here("data/RecObs.MCO.csv"), na = "")
}

rm(tRecObs, tRecObs2, tRecObs3)

```
## Spatial `RecObs`

```{r SpatialRecObs}
# Make a spatial file.  `tRecObs4` is a spatial file
# tRecObsSF2 <- tRecObs4 %>%
tRecObsSF2 <- RecObs %>%
  filter(!is.na(Lng)) %>%
  mutate(Lng2 = Lng, Lat2 = Lat) %>%
  st_as_sf(coords = c("Lng2", "Lat2"), crs = CRS.WGS84)

# This only had 137 observations, so it some locations are off.
tRecObsSF3 <- st_intersection(StrPlotSF %>%
                                select(Str_FK, PlotID_FK),
                              st_transform(x = tRecObsSF2, crs = st_crs(StrPlotSF))) %>%
  mutate(Str = ifelse(is.na(Str), Str_FK, Str),
         PlotID = ifelse(is.na(PlotID), PlotID_FK, PlotID))


RecObsSF <- st_as_sf(tRecObsSF2 %>%
                       filter(!is.na(Lng)),
                     coords = c("Lng", "Lat"),
                     crs = CRS.WGS84) %>%
  st_transform(crs = CRS.UTM19N)
if (lWrite) {
  st_write(RecObsSF, here::here("GIS/RecObsSF.kml"), delete_layer = TRUE)
}

rm(tRecObs4, tRecObsSF2, tRecObsSF3)

```
## Ground Observations

Add the ground observations. Make a spatial file by adding the colony information.

```{r GroundObservations}
if (lFromOri) {
  tGroundObs2015 <- read_csv(here::here("ori/GroundObs2015.csv"), col_types = "iiccciicc")
  tGroundObs2023 <- read_csv(here::here("ori/GroundObs2023.csv"), col_types = "cciiiicc")
} else {
  tGroundObs2015 <- read_excel(path = 
                               "~/Profesional/GBHE.2015/Ori/GroundObs_DualFrame.xlsx",
                               sheet = "Sheet1",
                               skip = 1)
  readr::write_csv(tGroundObs2015, here::here("ori/GroundObs2015.csv"), na = "")
  
  tGroundObs2023 <- read_csv(file =
                             "~/Profesional/GBHE.2023/extdata/2023/GroundCounts.csv", 
                             col_types = "cciiii------cc")
  readr::write_csv(tGroundObs2023, here::here("ori/GroundObs2023.csv"), na = "")
}

GroundObs2015 <- tGroundObs2015 %>%
  mutate(
    #      OBJECTID = row_number(),
    Year = 2015,
    Frame = "List",
    Svy = "GBHE",
    DatTim = as.character(Date),
    FWSColonyID = sprintf("ME.%04d", Colony),
    Obsr = "Gnd",
    Seat = "Dirt",
    Comment = `Additional Comments (from volunteer)`
  ) %>%
  rename(Nest = `Total Nests`,
    Act = `Active Nests`) %>%
  select(Year,
         Frame,
         Svy,
         DatTim,
         FWSColonyID,
         Obsr,
         Seat,
         Nest,
         Act,
         Comment)

 GroundObs2023 <-tGroundObs2023%>% 
  mutate(
    #      OBJECTID = row_number(),
    Year = 2023,
    Frame = "List",
    Svy = "GBHE",
    DatTim = Date,
    FWSColonyID = sprintf("ME.%04d", Colony),
    Obsr = "Gnd",
    Seat = "Dirt",
    Nest = Total,
    Act = Active,
    Comment = paste(GN, Notes, sep = ";")
  ) %>%
  select(Year,
         Frame,
         Svy,
         DatTim,
         FWSColonyID,
         Obsr,
         Seat,
         Nest,
         Act,
         Comment)

```
 Combine the year ground observations aand make the spatial layer
   
```{r CmbSpatialGround}
tGroundObs <- bind_rows(GroundObs2015, GroundObs2023) %>%
  mutate(OBJECTID = row_number()) %>%
  select(OBJECTID,
         Year,
         Frame,
         Svy,
         DatTim,
         FWSColonyID,
         Obsr,
         Seat,
         Nest,
         Act,
         Comment)

tGroundObsSF <- left_join(tGroundObs,
                          AllColonySF %>%
                            select(FWSColonyID, Str, PlotID, Lng, Lat, geometry),
                          by = "FWSColonyID") %>%
  select(
    OBJECTID,
    Year,
    FWSColonyID,
    Frame,
    Svy,
    Str,
    PlotID,
    Lng,
    Lat,
    DatTim,
    Obsr,
    Seat,
    Nest,
    Act,
    Comment,
    geometry
  )

# These 21 ground observations are not in the colony list I have
tGroundObsSF %>%
  filter(is.na(Lng))

GroundObsSF <- tGroundObsSF %>%
  filter(!is.na(Lng)) %>%
  st_sf()

if (lWrite) {
  st_write(GroundObsSF,
           here::here("GIS/GroundObsSF.kml"),
           delete_layer = TRUE)
}
rm(tGroundObs2015, tGroundObs2023, GroundObs2015, GroundObs2023, tGroundObs, tGroundObsSF)

```
## Non-Spatial Ground Observations


```{r GroundObsNonSpatial}
GroundObs <- st_drop_geometry(GroundObsSF)
if (lWrite) {
  readr::write_csv(GroundObs, here::here("data/GroundObs.csv"), na = "")
}

```
## Save Data

Save all the tables we need for the estimation. The spatial data are already in `gis` and the non-spatial tables in `data`, so they can be accessed easily by `locdata` which is more general than `base::data`. `Load`ing the save file makes data access easy as if this were an `R` project.

```{r SaveAll}
if(lWrite) {
  save(
    CRS.WGS84,
    CRS.Alpers,
    CRS.UTM19N,
    MEBoundarySF,
    StrSF,
    ColonySF,
    Colony,
    AllColonySF,
    AllColony,
    StrPlotSF,
    List,
    Plot,
    GRTSSmp,
    tblFlightInfo,
    tblPlotDetails,
    tblObservations,
    RecObs,
    NewColonies,
    GroundObsSF,
    GroundObs,
    file = here::here("output/GBHE.RData")
  )
}

```
